autosetup/jimsh0.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 62 configurations. Use --force to check all configurations. [toomanyconfigs]

^
autosetup/jimsh0.c:3873:9: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
        argc--;
        ^
autosetup/jimsh0.c:18045:15: style: Condition 'count<0' is always false [knownConditionTrueFalse]
    if (count < 0)
              ^
autosetup/jimsh0.c:18032:21: note: Assignment 'count=1', assigned value is 1
    long i, count = 1;
                    ^
autosetup/jimsh0.c:18037:14: note: Assuming condition is false
    if (argc < 2) {
             ^
autosetup/jimsh0.c:18045:15: note: Condition 'count<0' is always false
    if (count < 0)
              ^
autosetup/jimsh0.c:19104:21: style: Condition 'listPtr!=0' is always true [knownConditionTrueFalse]
        if (listPtr != 0 && listPtr != (Jim_Obj *)EOF) {
                    ^
autosetup/jimsh0.c:19098:17: note: Assuming that condition 'listPtr==0' is not redundant
    if (listPtr == 0)
                ^
autosetup/jimsh0.c:19104:21: note: Condition 'listPtr!=0' is always true
        if (listPtr != 0 && listPtr != (Jim_Obj *)EOF) {
                    ^
autosetup/jimsh0.c:18313:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    snprintf(buffer, sizeof(buffer), "%d entries in table, %d buckets\n", ht->used, ht->size);
    ^
autosetup/jimsh0.c:18313:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    snprintf(buffer, sizeof(buffer), "%d entries in table, %d buckets\n", ht->used, ht->size);
    ^
autosetup/jimsh0.c:18335:9: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
        snprintf(buffer, sizeof(buffer), "number of buckets with %d entries: %d\n", i, bucket_counts[i]);
        ^
autosetup/jimsh0.c:19681:11: warning: snprintf format string requires 2 parameters but 5 are given. [wrongPrintfScanfArgNum]
    len = snprintf(buf, len + 1, format, params[0], params[1], params[2], params[3], params[4]);
          ^
autosetup/jimsh0.c:14694:5: warning: Either the condition 'interp->prngState==NULL' is redundant or there is possible null pointer dereference: prng. [nullPointerRedundantCheck]
    prng->i = prng->j = 0;
    ^
autosetup/jimsh0.c:14679:27: note: Assuming that condition 'interp->prngState==NULL' is not redundant
    if (interp->prngState == NULL)
                          ^
autosetup/jimsh0.c:14681:18: note: Assignment 'prng=interp->prngState', assigned value is 0
    prng = interp->prngState;
                 ^
autosetup/jimsh0.c:14694:5: note: Null pointer dereference
    prng->i = prng->j = 0;
    ^
autosetup/jimsh0.c:20292:47: style: Variable 'formatted_bytes' is reassigned a value before the old one has been used. [redundantAssignment]
            formatted_chars = formatted_bytes = strlen(num_buffer);
                                              ^
autosetup/jimsh0.c:20290:33: note: formatted_bytes is assigned
                formatted_bytes = snprintf(num_buffer, length + 1, spec, w);
                                ^
autosetup/jimsh0.c:20292:47: note: formatted_bytes is overwritten
            formatted_chars = formatted_bytes = strlen(num_buffer);
                                              ^
autosetup/jimsh0.c:2893:20: style: The scope of the variable 'entryPtr' can be reduced. [variableScope]
    struct dirent *entryPtr;
                   ^
autosetup/jimsh0.c:9437:40: style: The scope of the variable 'nameObjPtr' can be reduced. [variableScope]
        Jim_Obj *objPtr, *initObjPtr, *nameObjPtr;
                                       ^
autosetup/jimsh0.c:9438:18: style: The scope of the variable 'varPtr' can be reduced. [variableScope]
        Jim_Var *varPtr;
                 ^
autosetup/jimsh0.c:9877:9: style: The scope of the variable 'err' can be reduced. [variableScope]
    int err;
        ^
autosetup/jimsh0.c:14427:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
autosetup/jimsh0.c:14654:18: style: The scope of the variable 'si' can be reduced. [variableScope]
    unsigned int si, sj, x;
                 ^
autosetup/jimsh0.c:14654:22: style: The scope of the variable 'sj' can be reduced. [variableScope]
    unsigned int si, sj, x;
                     ^
autosetup/jimsh0.c:16475:9: style: The scope of the variable 'result' can be reduced. [variableScope]
    int result = JIM_ERR;
        ^
autosetup/jimsh0.c:16696:23: style: The scope of the variable 'listObjPtr' can be reduced. [variableScope]
    Jim_Obj *objPtr, *listObjPtr;
                      ^
autosetup/jimsh0.c:17105:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
autosetup/jimsh0.c:18713:26: style: The scope of the variable 'fileNameObj' can be reduced. [variableScope]
                Jim_Obj *fileNameObj;
                         ^
autosetup/jimsh0.c:19066:15: style: The scope of the variable 'i' can be reduced. [variableScope]
    int outc, i;
              ^
autosetup/jimsh0.c:20582:6: style: The scope of the variable 'latest' can be reduced. [variableScope]
 int latest;
     ^
autosetup/jimsh0.c:21151:6: style: The scope of the variable 'temp' can be reduced. [variableScope]
 int temp;
     ^
autosetup/jimsh0.c:4596:123: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
            Jim_AppendStrings(interp, errStrObj, "child ", action, " by signal ", Jim_SignalId(WTERMSIG(waitStatus)), "\n", NULL);
                                                                                                                          ^
autosetup/jimsh0.c:5938:69: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_SetResultFormatted(interp, "\"%#s\" isn't an array", argv[0], NULL);
                                                                    ^
autosetup/jimsh0.c:19523:83: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), prefix, tablePtrSorted[i], NULL);
                                                                                  ^
autosetup/jimsh0.c:19728:72: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
            Jim_AppendStrings(interp, Jim_GetResult(interp), s, ct->cmd, NULL);
                                                                       ^
autosetup/jimsh0.c:19751:78: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), Jim_String(cmd), " ", NULL);
                                                                             ^
autosetup/jimsh0.c:19753:61: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_AppendStrings(interp, Jim_GetResult(interp), ct->cmd, NULL);
                                                            ^
autosetup/jimsh0.c:19755:71: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), " ", ct->args, NULL);
                                                                      ^
autosetup/jimsh0.c:19763:58: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_AppendStrings(interp, Jim_GetResult(interp), "\"", NULL);
                                                         ^
autosetup/jimsh0.c:19879:62: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), "\"", NULL);
                                                             ^
autosetup/jimsh0.c:19316:26: warning: Either the condition 'step>0' is redundant or there is division by zero at line 19316. [zerodivcond]
    len = 1 + ((len - 1) / step);
                         ^
autosetup/jimsh0.c:19307:19: note: Assuming that condition 'step>0' is not redundant
    else if (step > 0 && start > end)
                  ^
autosetup/jimsh0.c:19316:26: note: Division by zero
    len = 1 + ((len - 1) / step);
                         ^
autosetup/jimsh0.c:6682:79: style:inconclusive: Function 'Jim_InitHashTable' argument 3 names different: declaration 'privdata' definition 'privDataPtr'. [funcArgNamesDifferent]
int Jim_InitHashTable(Jim_HashTable *ht, const Jim_HashTableType *type, void *privDataPtr)
                                                                              ^
autosetup/jimsh0.c:673:46: note: Function 'Jim_InitHashTable' argument 3 names different: declaration 'privdata' definition 'privDataPtr'.
        const Jim_HashTableType *type, void *privdata);
                                             ^
autosetup/jimsh0.c:6682:79: note: Function 'Jim_InitHashTable' argument 3 names different: declaration 'privdata' definition 'privDataPtr'.
int Jim_InitHashTable(Jim_HashTable *ht, const Jim_HashTableType *type, void *privDataPtr)
                                                                              ^
autosetup/jimsh0.c:9408:55: style:inconclusive: Function 'Jim_CreateCommand' argument 2 names different: declaration 'cmdName' definition 'cmdNameStr'. [funcArgNamesDifferent]
int Jim_CreateCommand(Jim_Interp *interp, const char *cmdNameStr,
                                                      ^
autosetup/jimsh0.c:751:21: note: Function 'Jim_CreateCommand' argument 2 names different: declaration 'cmdName' definition 'cmdNameStr'.
        const char *cmdName, Jim_CmdProc *cmdProc, void *privData,
                    ^
autosetup/jimsh0.c:9408:55: note: Function 'Jim_CreateCommand' argument 2 names different: declaration 'cmdName' definition 'cmdNameStr'.
int Jim_CreateCommand(Jim_Interp *interp, const char *cmdNameStr,
                                                      ^
autosetup/jimsh0.c:9590:55: style:inconclusive: Function 'Jim_DeleteCommand' argument 2 names different: declaration 'cmdName' definition 'name'. [funcArgNamesDifferent]
int Jim_DeleteCommand(Jim_Interp *interp, const char *name)
                                                      ^
autosetup/jimsh0.c:754:21: note: Function 'Jim_DeleteCommand' argument 2 names different: declaration 'cmdName' definition 'name'.
        const char *cmdName);
                    ^
autosetup/jimsh0.c:9590:55: note: Function 'Jim_DeleteCommand' argument 2 names different: declaration 'cmdName' definition 'name'.
int Jim_DeleteCommand(Jim_Interp *interp, const char *name)
                                                      ^
autosetup/jimsh0.c:10183:57: style:inconclusive: Function 'JimDictSugarSet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'. [funcArgNamesDifferent]
static int JimDictSugarSet(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *valObjPtr)
                                                        ^
autosetup/jimsh0.c:9833:57: note: Function 'JimDictSugarSet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'.
static int JimDictSugarSet(Jim_Interp *interp, Jim_Obj *ObjPtr, Jim_Obj *valObjPtr);
                                                        ^
autosetup/jimsh0.c:10183:57: note: Function 'JimDictSugarSet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'.
static int JimDictSugarSet(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *valObjPtr)
                                                        ^
autosetup/jimsh0.c:10239:62: style:inconclusive: Function 'JimDictSugarGet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'. [funcArgNamesDifferent]
static Jim_Obj *JimDictSugarGet(Jim_Interp *interp, Jim_Obj *objPtr, int flags)
                                                             ^
autosetup/jimsh0.c:9834:62: note: Function 'JimDictSugarGet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'.
static Jim_Obj *JimDictSugarGet(Jim_Interp *interp, Jim_Obj *ObjPtr, int flags);
                                                             ^
autosetup/jimsh0.c:10239:62: note: Function 'JimDictSugarGet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'.
static Jim_Obj *JimDictSugarGet(Jim_Interp *interp, Jim_Obj *objPtr, int flags)
                                                             ^
autosetup/jimsh0.c:11755:71: style:inconclusive: Function 'Jim_ListInsertElements' argument 3 names different: declaration 'listindex' definition 'idx'. [funcArgNamesDifferent]
void Jim_ListInsertElements(Jim_Interp *interp, Jim_Obj *listPtr, int idx,
                                                                      ^
autosetup/jimsh0.c:799:31: note: Function 'Jim_ListInsertElements' argument 3 names different: declaration 'listindex' definition 'idx'.
        Jim_Obj *listPtr, int listindex, int objc, Jim_Obj *const *objVec);
                              ^
autosetup/jimsh0.c:11755:71: note: Function 'Jim_ListInsertElements' argument 3 names different: declaration 'listindex' definition 'idx'.
void Jim_ListInsertElements(Jim_Interp *interp, Jim_Obj *listPtr, int idx,
                                                                      ^
autosetup/jimsh0.c:11780:48: style:inconclusive: Function 'Jim_ListIndex' argument 2 names different: declaration 'listPrt' definition 'listPtr'. [funcArgNamesDifferent]
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                               ^
autosetup/jimsh0.c:805:60: note: Function 'Jim_ListIndex' argument 2 names different: declaration 'listPrt' definition 'listPtr'.
JIM_EXPORT int Jim_ListIndex (Jim_Interp *interp, Jim_Obj *listPrt,
                                                           ^
autosetup/jimsh0.c:11780:48: note: Function 'Jim_ListIndex' argument 2 names different: declaration 'listPrt' definition 'listPtr'.
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                               ^
autosetup/jimsh0.c:11780:61: style:inconclusive: Function 'Jim_ListIndex' argument 3 names different: declaration 'listindex' definition 'idx'. [funcArgNamesDifferent]
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                                            ^
autosetup/jimsh0.c:806:13: note: Function 'Jim_ListIndex' argument 3 names different: declaration 'listindex' definition 'idx'.
        int listindex, Jim_Obj **objPtrPtr, int seterr);
            ^
autosetup/jimsh0.c:11780:61: note: Function 'Jim_ListIndex' argument 3 names different: declaration 'listindex' definition 'idx'.
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                                            ^
autosetup/jimsh0.c:11780:91: style:inconclusive: Function 'Jim_ListIndex' argument 5 names different: declaration 'seterr' definition 'flags'. [funcArgNamesDifferent]
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                                                                          ^
autosetup/jimsh0.c:806:49: note: Function 'Jim_ListIndex' argument 5 names different: declaration 'seterr' definition 'flags'.
        int listindex, Jim_Obj **objPtrPtr, int seterr);
                                                ^
autosetup/jimsh0.c:11780:91: note: Function 'Jim_ListIndex' argument 5 names different: declaration 'seterr' definition 'flags'.
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                                                                          ^
autosetup/jimsh0.c:11792:67: style:inconclusive: Function 'ListSetIndex' argument 3 names different: declaration 'listindex' definition 'idx'. [funcArgNamesDifferent]
static int ListSetIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx,
                                                                  ^
autosetup/jimsh0.c:6150:67: note: Function 'ListSetIndex' argument 3 names different: declaration 'listindex' definition 'idx'.
static int ListSetIndex(Jim_Interp *interp, Jim_Obj *listPtr, int listindex, Jim_Obj *newObjPtr,
                                                                  ^
autosetup/jimsh0.c:11792:67: note: Function 'ListSetIndex' argument 3 names different: declaration 'listindex' definition 'idx'.
static int ListSetIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx,
                                                                  ^
autosetup/jimsh0.c:15036:50: style:inconclusive: Function 'Jim_EvalObjList' argument 2 names different: declaration 'listObj' definition 'listPtr'. [funcArgNamesDifferent]
int Jim_EvalObjList(Jim_Interp *interp, Jim_Obj *listPtr)
                                                 ^
autosetup/jimsh0.c:654:61: note: Function 'Jim_EvalObjList' argument 2 names different: declaration 'listObj' definition 'listPtr'.
JIM_EXPORT int Jim_EvalObjList(Jim_Interp *interp, Jim_Obj *listObj);
                                                            ^
autosetup/jimsh0.c:15036:50: note: Function 'Jim_EvalObjList' argument 2 names different: declaration 'listObj' definition 'listPtr'.
int Jim_EvalObjList(Jim_Interp *interp, Jim_Obj *listPtr)
                                                 ^
autosetup/jimsh0.c:20433:40: style:inconclusive: Function 'regcomp' argument 2 names different: declaration 'regex' definition 'exp'. [funcArgNamesDifferent]
int regcomp(regex_t *preg, const char *exp, int cflags)
                                       ^
autosetup/jimsh0.c:1045:40: note: Function 'regcomp' argument 2 names different: declaration 'regex' definition 'exp'.
int regcomp(regex_t *preg, const char *regex, int cflags);
                                       ^
autosetup/jimsh0.c:20433:40: note: Function 'regcomp' argument 2 names different: declaration 'regex' definition 'exp'.
int regcomp(regex_t *preg, const char *exp, int cflags)
                                       ^
autosetup/jimsh0.c:21326:38: style:inconclusive: Function 'reg_range_find' argument 1 names different: declaration 'string' definition 'range'. [funcArgNamesDifferent]
static int reg_range_find(const int *range, int c)
                                     ^
autosetup/jimsh0.c:20412:38: note: Function 'reg_range_find' argument 1 names different: declaration 'string' definition 'range'.
static int reg_range_find(const int *string, int c);
                                     ^
autosetup/jimsh0.c:21326:38: note: Function 'reg_range_find' argument 1 names different: declaration 'string' definition 'range'.
static int reg_range_find(const int *range, int c)
                                     ^
autosetup/jimsh0.c:281:13: style: union member 'Anonymous0::intval' is never used. [unusedStructMember]
        int intval;
            ^
autosetup/jimsh0.c:369:19: style: struct member 'Anonymous2::ptr1' is never used. [unusedStructMember]
            void *ptr1;
                  ^
autosetup/jimsh0.c:370:19: style: struct member 'Anonymous2::ptr2' is never used. [unusedStructMember]
            void *ptr2;
                  ^
autosetup/jimsh0.c:404:35: style: struct member 'Anonymous8::refPtr' is never used. [unusedStructMember]
            struct Jim_Reference *refPtr;
                                  ^
autosetup/jimsh0.c:10485:24: style: union member 'Anonymous21::s' is never used. [unusedStructMember]
        unsigned short s;
                       ^
autosetup/jimsh0.c:3873:13: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
        argc--;
            ^
autosetup/jimsh0.c:16475:16: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
    int result = JIM_ERR;
               ^
autosetup/jimsh0.c:20441:39: warning: Either the condition 'exp==NULL' is redundant or there is possible null pointer dereference: exp. [nullPointerRedundantCheck]
 fprintf(stderr, "Compiling: '%s'\n", exp);
                                      ^
autosetup/jimsh0.c:20445:10: note: Assuming that condition 'exp==NULL' is not redundant
 if (exp == NULL)
         ^
autosetup/jimsh0.c:20441:39: note: Null pointer dereference
 fprintf(stderr, "Compiling: '%s'\n", exp);
                                      ^
autosetup/jimsh0.c:2024:0: information: Skipping configuration 'ECONNABORTED' since the value of 'ECONNABORTED' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (errno == ECONNABORTED) {
^
autosetup/jimsh0.c:2019:0: information: Skipping configuration 'ECONNRESET' since the value of 'ECONNRESET' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (errno == ECONNRESET) {
^
jim-aio.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 59 configurations. Use --force to check all configurations. [toomanyconfigs]

^
jim-aio.c:935:13: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
        argv++;
            ^
jim-aio.c:233:0: information: Skipping configuration 'ECONNABORTED' since the value of 'ECONNABORTED' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        case ECONNABORTED:
^
jim-aio.c:230:0: information: Skipping configuration 'ECONNRESET' since the value of 'ECONNRESET' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        case ECONNRESET:
^
jim-aio.c:2399:0: information: Skipping configuration 'FD_CLOEXEC' since the value of 'FD_CLOEXEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        (void)fcntl(af->fd, F_SETFD, FD_CLOEXEC);
^
jim-array.c:164:69: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_SetResultFormatted(interp, "\"%#s\" isn't an array", argv[0], NULL);
                                                                    ^
jim-eventloop.c:505:18: style: The scope of the variable 'id' can be reduced. [variableScope]
        jim_wide id;
                 ^
jim-eventloop.c:675:23: style: The scope of the variable 'idObjPtr' can be reduced. [variableScope]
    Jim_Obj *objPtr, *idObjPtr;
                      ^
jim-eventloop.c:240:61: style:inconclusive: Function 'Jim_CreateTimeHandler' argument 2 names different: declaration 'milliseconds' definition 'us'. [funcArgNamesDifferent]
jim_wide Jim_CreateTimeHandler(Jim_Interp *interp, jim_wide us,
                                                            ^
jim-eventloop.h:72:18: note: Function 'Jim_CreateTimeHandler' argument 2 names different: declaration 'milliseconds' definition 'us'.
        jim_wide milliseconds,
                 ^
jim-eventloop.c:240:61: note: Function 'Jim_CreateTimeHandler' argument 2 names different: declaration 'milliseconds' definition 'us'.
jim_wide Jim_CreateTimeHandler(Jim_Interp *interp, jim_wide us,
                                                            ^
jim-exec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
jim-exec.c:261:123: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
            Jim_AppendStrings(interp, errStrObj, "child ", action, " by signal ", Jim_SignalId(WTERMSIG(waitStatus)), "\n", NULL);
                                                                                                                          ^
jim-file.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations. [toomanyconfigs]

^
jim-file.c:628:9: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
        argc--;
        ^
jim-file.c:628:13: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
        argc--;
            ^
jim-file.c:669:9: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
        argc--;
        ^
jim-file.c:669:13: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
        argc--;
            ^
jim-format.c:430:47: style: Variable 'formatted_bytes' is reassigned a value before the old one has been used. [redundantAssignment]
            formatted_chars = formatted_bytes = strlen(num_buffer);
                                              ^
jim-format.c:428:33: note: formatted_bytes is assigned
                formatted_bytes = snprintf(num_buffer, length + 1, spec, w);
                                ^
jim-format.c:430:47: note: formatted_bytes is overwritten
            formatted_chars = formatted_bytes = strlen(num_buffer);
                                              ^
jim-interactive.c:139:5: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    return 0;
    ^
jim-mk.cpp:724:9: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
        *curPtr = &view[PositionIndex(&JimCursorValue(obj)->pos, view)];
        ^
jim-mk.cpp:613:5: style: C-style pointer casting [cstyleCast]
    Jim_DecrRefCount(interp, JimCursorValue(obj)->viewObj);
    ^
jim-mk.cpp:620:6: style: C-style pointer casting [cstyleCast]
    *JimCursorValue(newObj) = *JimCursorValue(oldObj);
     ^
jim-mk.cpp:621:5: style: C-style pointer casting [cstyleCast]
    Jim_IncrRefCount(JimCursorValue(oldObj)->viewObj);
    ^
jim-mk.cpp:629:24: style: C-style pointer casting [cstyleCast]
    MkCursor *curPtr = JimCursorValue(obj);
                       ^
jim-mk.cpp:689:6: style: C-style pointer casting [cstyleCast]
    *JimCursorValue(obj) = cur;
     ^
jim-mk.cpp:710:19: style: C-style pointer casting [cstyleCast]
    *viewObjPtr = JimCursorValue(obj)->viewObj;
                  ^
jim-mk.cpp:720:28: style: C-style pointer casting [cstyleCast]
    if (JimGetView(interp, JimCursorValue(obj)->viewObj, &view) != JIM_OK)
                           ^
jim-mk.cpp:724:40: style: C-style pointer casting [cstyleCast]
        *curPtr = &view[PositionIndex(&JimCursorValue(obj)->pos, view)];
                                       ^
jim-mk.cpp:736:5: style: C-style pointer casting [cstyleCast]
    JimCursorValue(obj)->pos.index += offset;
    ^
jim-mk.cpp:748:41: style: C-style pointer casting [cstyleCast]
    return GetPosition(interp, posObj, &JimCursorValue(obj)->pos);
                                        ^
jim-mk.cpp:1889:21: style: C-style pointer casting [cstyleCast]
    MkStorage *mk = (MkStorage *)Jim_CmdPrivData(interp);
                    ^
jim-mk.cpp:1910:21: style: C-style pointer casting [cstyleCast]
    MkStorage *mk = (MkStorage *)Jim_CmdPrivData(interp);
                    ^
jim-mk.cpp:1920:21: style: C-style pointer casting [cstyleCast]
    MkStorage *mk = (MkStorage *)Jim_CmdPrivData(interp);
                    ^
jim-mk.cpp:1928:21: style: C-style pointer casting [cstyleCast]
    MkStorage *mk = (MkStorage *)Jim_CmdPrivData(interp);
                    ^
jim-mk.cpp:1949:21: style: C-style pointer casting [cstyleCast]
    MkStorage *mk = (MkStorage *)Jim_CmdPrivData(interp);
                    ^
jim-mk.cpp:1999:21: style: C-style pointer casting [cstyleCast]
    MkStorage *mk = (MkStorage *)Jim_CmdPrivData(interp);
                    ^
jim-mk.cpp:2022:21: style: C-style pointer casting [cstyleCast]
    MkStorage *mk = (MkStorage *)Jim_CmdPrivData(interp);
                    ^
jim-mk.cpp:2110:21: style: C-style pointer casting [cstyleCast]
    MkStorage *mk = (MkStorage *)privData;
                    ^
jim-mk.cpp:2178:10: style: C-style pointer casting [cstyleCast]
    mk = (MkStorage *)Jim_Alloc(sizeof(MkStorage));
         ^
jim-mk.cpp:375:17: style: The scope of the variable 'rep' can be reduced. [variableScope]
    const char *rep;
                ^
jim-mk.cpp:630:9: style: The scope of the variable 'idx' can be reduced. [variableScope]
    int idx, len;
        ^
jim-mk.cpp:1328:17: style: The scope of the variable 'rep' can be reduced. [variableScope]
    const char *rep;
                ^
jim-mk.cpp:1329:9: style: The scope of the variable 'reverse' can be reduced. [variableScope]
    int reverse;
        ^
jim-mk.cpp:1330:14: style: The scope of the variable 'propObj' can be reduced. [variableScope]
    Jim_Obj *propObj;
             ^
jim-mk.cpp:199:60: style:inconclusive: Function 'JimToMkDescription' argument 2 names different: declaration 'obj' definition 'descrObj'. [funcArgNamesDifferent]
static int JimToMkDescription(Jim_Interp *interp, Jim_Obj *descrObj, char **descrPtr)
                                                           ^
jim-mk.cpp:41:60: note: Function 'JimToMkDescription' argument 2 names different: declaration 'obj' definition 'descrObj'.
static int JimToMkDescription(Jim_Interp *interp, Jim_Obj *obj, char **descrPtr);
                                                           ^
jim-mk.cpp:199:60: note: Function 'JimToMkDescription' argument 2 names different: declaration 'obj' definition 'descrObj'.
static int JimToMkDescription(Jim_Interp *interp, Jim_Obj *descrObj, char **descrPtr)
                                                           ^
jim-mk.cpp:421:87: style:inconclusive: Function 'JimGetProperty' argument 4 names different: declaration 'what' definition 'name'. [funcArgNamesDifferent]
static int JimGetProperty(Jim_Interp *interp, Jim_Obj *obj, c4_View view, const char *name, const c4_Property **propPtr)
                                                                                      ^
jim-mk.cpp:50:31: note: Function 'JimGetProperty' argument 4 names different: declaration 'what' definition 'name'.
    c4_View view, const char *what, const c4_Property **propPtr);
                              ^
jim-mk.cpp:421:87: note: Function 'JimGetProperty' argument 4 names different: declaration 'what' definition 'name'.
static int JimGetProperty(Jim_Interp *interp, Jim_Obj *obj, c4_View view, const char *name, const c4_Property **propPtr)
                                                                                      ^
jim-pack.c:224:68: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    offs = Jim_IsBigEndian() ? (sizeof(jim_wide) - sizeof(double)) : 0;
                                                                   ^
jim-pack.c:261:68: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    offs = Jim_IsBigEndian() ? (sizeof(jim_wide) - sizeof(double)) : 0;
                                                                   ^
jim-readdir.c:73:20: style: The scope of the variable 'entryPtr' can be reduced. [variableScope]
    struct dirent *entryPtr;
                   ^
jim-redis.c:102:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
jim-redis.c:104:18: style: The scope of the variable 'args' can be reduced. [variableScope]
    const char **args;
                 ^
jim-redis.c:105:13: style: The scope of the variable 'arglens' can be reduced. [variableScope]
    size_t *arglens;
            ^
jim-regexp.c:449:12: warning: Redundant assignment of 'offset' to itself. [selfAssignment]
    offset = utf8_index(source_str, offset);
           ^
jim-regexp.c:227:20: style: Condition 'offset<0' is always false [knownConditionTrueFalse]
        if (offset < 0) {
                   ^
jim-regexp.c:226:9: note: Assuming condition 'offset' is true
    if (offset) {
        ^
jim-regexp.c:227:20: note: Condition 'offset<0' is always false
        if (offset < 0) {
                   ^
jim-regexp.c:233:25: style: Condition 'offset>0' is always true [knownConditionTrueFalse]
        else if (offset > 0) {
                        ^
jim-regexp.c:226:9: note: Assuming condition 'offset' is true
    if (offset) {
        ^
jim-regexp.c:233:25: note: Condition 'offset>0' is always true
        else if (offset > 0) {
                        ^
jim-regexp.c:438:20: style: Condition 'offset<0' is always false [knownConditionTrueFalse]
        if (offset < 0) {
                   ^
jim-regexp.c:437:9: note: Assuming condition 'offset' is true
    if (offset) {
        ^
jim-regexp.c:438:20: note: Condition 'offset<0' is always false
        if (offset < 0) {
                   ^
jim-regexp.c:444:25: style: Condition 'offset<0' is always false [knownConditionTrueFalse]
        else if (offset < 0) {
                        ^
jim-regexp.c:437:9: note: Assuming condition 'offset' is true
    if (offset) {
        ^
jim-regexp.c:444:25: note: Condition 'offset<0' is always false
        else if (offset < 0) {
                        ^
jim-signal.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
jim-signal.c:421:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
jim-signal.c:497:17: style: The scope of the variable 'signame' can be reduced. [variableScope]
    const char *signame;
                ^
jim-signal.c:276:23: portability: Shifting signed 64-bit value by 63 bits is implementation-defined behaviour [shiftTooManyBitsSigned]
        if (sigmask & sig_to_bit(i)) {
                      ^
jim-signal.c:303:21: portability: Shifting signed 64-bit value by 63 bits is implementation-defined behaviour. See condition at line 300. [shiftTooManyBitsSigned]
            mask |= sig_to_bit(sig);
                    ^
jim-signal.c:300:32: note: Assuming that condition 'sig>=(int)(sizeof(long)*8)' is not redundant
            if (sig < 0 || sig >= MAX_SIGNALS) {
                               ^
jim-signal.c:303:21: note: Shift
            mask |= sig_to_bit(sig);
                    ^
jim-signal.c:30:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
} siginfo[MAX_SIGNALS];
^
jim-signal.c:128:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (sig >=0 && sig < MAX_SIGNALS) {
^
jim-signal.c:156:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (i > 0 && i < MAX_SIGNALS) {
^
jim-signal.c:161:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        for (i = 1; i < MAX_SIGNALS; i++) {
^
jim-signal.c:187:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        for (i = 1; i < MAX_SIGNALS; i++) {
^
jim-signal.c:228:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                            sa_old = Jim_Alloc(sizeof(*sa_old) * MAX_SIGNALS);
^
jim-signal.c:275:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    for (i = 0; i < MAX_SIGNALS; i++) {
^
jim-signal.c:300:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            if (sig < 0 || sig >= MAX_SIGNALS) {
^
jim-signal.c:423:0: information: Skipping configuration 'NSIG' since the value of 'NSIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        for (i = 1; i < MAX_SIGNALS; i++) {
^
jim-signal.c:93:0: information: Skipping configuration 'SIGCLD' since the value of 'SIGCLD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SET_SIG_NAME(SIGCLD);
^
jim-signal.c:96:0: information: Skipping configuration 'SIGEMT' since the value of 'SIGEMT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SET_SIG_NAME(SIGEMT);
^
jim-signal.c:105:0: information: Skipping configuration 'SIGINFO' since the value of 'SIGINFO' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SET_SIG_NAME(SIGINFO);
^
jim-signal.c:68:0: information: Skipping configuration 'SIGIO' since the value of 'SIGIO' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SET_SIG_NAME(SIGIO);
^
jim-signal.c:99:0: information: Skipping configuration 'SIGLOST' since the value of 'SIGLOST' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SET_SIG_NAME(SIGLOST);
^
jim-signal.c:102:0: information: Skipping configuration 'SIGPOLL' since the value of 'SIGPOLL' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SET_SIG_NAME(SIGPOLL);
^
jim-subcmd.c:77:78: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), Jim_String(cmd), " ", NULL);
                                                                             ^
jim-subcmd.c:79:61: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_AppendStrings(interp, Jim_GetResult(interp), ct->cmd, NULL);
                                                            ^
jim-subcmd.c:81:71: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), " ", ct->args, NULL);
                                                                      ^
jim-subcmd.c:89:58: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
    Jim_AppendStrings(interp, Jim_GetResult(interp), "\"", NULL);
                                                         ^
jim-subcmd.c:219:62: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), "\"", NULL);
                                                             ^
jim-tty.c:35:0: information: Skipping configuration 'B230400' since the value of 'B230400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    { 230400, B230400 },
^
jim-tty.c:38:0: information: Skipping configuration 'B460800' since the value of 'B460800' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    { 460800, B460800 }
^
jim.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 44 configurations. Use --force to check all configurations. [toomanyconfigs]

^
jim.c:573:43: warning: Either the condition 'base' is redundant or strtoul() argument nr 3 can have invalid value. The value is 1 but the valid values are '0,2:36'. [invalidFunctionArg]
        *widePtr = strtoull(str, &endptr, base);
                                          ^
jim.c:572:9: note: Assuming condition 'base' is true
    if (base) {
        ^
jim.c:573:43: note: Invalid argument
        *widePtr = strtoull(str, &endptr, base);
                                          ^
jim.c:14639:15: style: Condition 'count<0' is always false [knownConditionTrueFalse]
    if (count < 0)
              ^
jim.c:14628:21: note: Assignment 'count=1', assigned value is 1
    long i, count = 1;
                    ^
jim.c:14631:14: note: Assuming condition is false
    if (argc < 2) {
             ^
jim.c:14639:15: note: Condition 'count<0' is always false
    if (count < 0)
              ^
jim.c:14681:12: style: Condition 'us<1' is always true [knownConditionTrueFalse]
    if (us < 1) {
           ^
jim.c:14665:15: note: Assignment 'us=0', assigned value is 0
    long us = 0;
              ^
jim.c:14672:14: note: Assuming condition is false
    if (argc < 2) {
             ^
jim.c:14681:12: note: Condition 'us<1' is always true
    if (us < 1) {
           ^
jim.c:16056:21: style: Condition 'listPtr!=0' is always true [knownConditionTrueFalse]
        if (listPtr != 0 && listPtr != (Jim_Obj *)EOF) {
                    ^
jim.c:16050:17: note: Assuming that condition 'listPtr==0' is not redundant
    if (listPtr == 0)
                ^
jim.c:16056:21: note: Condition 'listPtr!=0' is always true
        if (listPtr != 0 && listPtr != (Jim_Obj *)EOF) {
                    ^
jim.c:15243:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    snprintf(buffer, sizeof(buffer), "%d entries in table, %d buckets", dict->len, dict->size);
    ^
jim.c:16681:11: warning: snprintf format string requires 1 parameter but 5 are given. [wrongPrintfScanfArgNum]
    len = snprintf(buf, len + 1, format, params[0], params[1], params[2], params[3], params[4]);
          ^
jim.c:10621:5: warning: Either the condition 'interp->prngState==NULL' is redundant or there is possible null pointer dereference: prng. [nullPointerRedundantCheck]
    prng->i = prng->j = 0;
    ^
jim.c:10606:27: note: Assuming that condition 'interp->prngState==NULL' is not redundant
    if (interp->prngState == NULL)
                          ^
jim.c:10608:18: note: Assignment 'prng=interp->prngState', assigned value is 0
    prng = interp->prngState;
                 ^
jim.c:10621:5: note: Null pointer dereference
    prng->i = prng->j = 0;
    ^
jim.c:4634:9: style: The scope of the variable 'err' can be reduced. [variableScope]
    int err;
        ^
jim.c:10335:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
jim.c:10581:18: style: The scope of the variable 'si' can be reduced. [variableScope]
    unsigned int si, sj, x;
                 ^
jim.c:10581:22: style: The scope of the variable 'sj' can be reduced. [variableScope]
    unsigned int si, sj, x;
                     ^
jim.c:12716:9: style: The scope of the variable 'result' can be reduced. [variableScope]
    int result = JIM_ERR;
        ^
jim.c:13481:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
jim.c:15664:26: style: The scope of the variable 'fileNameObj' can be reduced. [variableScope]
                Jim_Obj *fileNameObj;
                         ^
jim.c:16018:15: style: The scope of the variable 'i' can be reduced. [variableScope]
    int outc, i;
              ^
jim.c:16493:83: portability: Passing NULL after the last typed argument to a variadic function leads to undefined behaviour. [varFuncNullUB]
        Jim_AppendStrings(interp, Jim_GetResult(interp), prefix, tablePtrSorted[i], NULL);
                                                                                  ^
jim.c:16269:26: warning: Either the condition 'step>0' is redundant or there is division by zero at line 16269. [zerodivcond]
    len = 1 + ((len - 1) / step);
                         ^
jim.c:16260:19: note: Assuming that condition 'step>0' is not redundant
    else if (step > 0 && start > end)
                  ^
jim.c:16269:26: note: Division by zero
    len = 1 + ((len - 1) / step);
                         ^
jim.c:799:79: style:inconclusive: Function 'Jim_InitHashTable' argument 3 names different: declaration 'privdata' definition 'privDataPtr'. [funcArgNamesDifferent]
int Jim_InitHashTable(Jim_HashTable *ht, const Jim_HashTableType *type, void *privDataPtr)
                                                                              ^
jim.h:713:46: note: Function 'Jim_InitHashTable' argument 3 names different: declaration 'privdata' definition 'privDataPtr'.
        const Jim_HashTableType *type, void *privdata);
                                             ^
jim.c:799:79: note: Function 'Jim_InitHashTable' argument 3 names different: declaration 'privdata' definition 'privDataPtr'.
int Jim_InitHashTable(Jim_HashTable *ht, const Jim_HashTableType *type, void *privDataPtr)
                                                                              ^
jim.c:4090:55: style:inconclusive: Function 'Jim_CreateCommand' argument 2 names different: declaration 'cmdName' definition 'cmdNameStr'. [funcArgNamesDifferent]
int Jim_CreateCommand(Jim_Interp *interp, const char *cmdNameStr,
                                                      ^
jim.h:788:21: note: Function 'Jim_CreateCommand' argument 2 names different: declaration 'cmdName' definition 'cmdNameStr'.
        const char *cmdName, Jim_CmdProc *cmdProc, void *privData,
                    ^
jim.c:4090:55: note: Function 'Jim_CreateCommand' argument 2 names different: declaration 'cmdName' definition 'cmdNameStr'.
int Jim_CreateCommand(Jim_Interp *interp, const char *cmdNameStr,
                                                      ^
jim.c:4326:52: style:inconclusive: Function 'Jim_DeleteCommand' argument 2 names different: declaration 'cmdNameObj' definition 'nameObj'. [funcArgNamesDifferent]
int Jim_DeleteCommand(Jim_Interp *interp, Jim_Obj *nameObj)
                                                   ^
jim.h:791:18: note: Function 'Jim_DeleteCommand' argument 2 names different: declaration 'cmdNameObj' definition 'nameObj'.
        Jim_Obj *cmdNameObj);
                 ^
jim.c:4326:52: note: Function 'Jim_DeleteCommand' argument 2 names different: declaration 'cmdNameObj' definition 'nameObj'.
int Jim_DeleteCommand(Jim_Interp *interp, Jim_Obj *nameObj)
                                                   ^
jim.c:4976:57: style:inconclusive: Function 'JimDictSugarSet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'. [funcArgNamesDifferent]
static int JimDictSugarSet(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *valObjPtr)
                                                        ^
jim.c:4566:57: note: Function 'JimDictSugarSet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'.
static int JimDictSugarSet(Jim_Interp *interp, Jim_Obj *ObjPtr, Jim_Obj *valObjPtr);
                                                        ^
jim.c:4976:57: note: Function 'JimDictSugarSet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'.
static int JimDictSugarSet(Jim_Interp *interp, Jim_Obj *objPtr, Jim_Obj *valObjPtr)
                                                        ^
jim.c:5038:62: style:inconclusive: Function 'JimDictSugarGet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'. [funcArgNamesDifferent]
static Jim_Obj *JimDictSugarGet(Jim_Interp *interp, Jim_Obj *objPtr, int flags)
                                                             ^
jim.c:4567:62: note: Function 'JimDictSugarGet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'.
static Jim_Obj *JimDictSugarGet(Jim_Interp *interp, Jim_Obj *ObjPtr, int flags);
                                                             ^
jim.c:5038:62: note: Function 'JimDictSugarGet' argument 2 names different: declaration 'ObjPtr' definition 'objPtr'.
static Jim_Obj *JimDictSugarGet(Jim_Interp *interp, Jim_Obj *objPtr, int flags)
                                                             ^
jim.c:7140:71: style:inconclusive: Function 'Jim_ListInsertElements' argument 3 names different: declaration 'listindex' definition 'idx'. [funcArgNamesDifferent]
void Jim_ListInsertElements(Jim_Interp *interp, Jim_Obj *listPtr, int idx,
                                                                      ^
jim.h:836:31: note: Function 'Jim_ListInsertElements' argument 3 names different: declaration 'listindex' definition 'idx'.
        Jim_Obj *listPtr, int listindex, int objc, Jim_Obj *const *objVec);
                              ^
jim.c:7140:71: note: Function 'Jim_ListInsertElements' argument 3 names different: declaration 'listindex' definition 'idx'.
void Jim_ListInsertElements(Jim_Interp *interp, Jim_Obj *listPtr, int idx,
                                                                      ^
jim.c:7165:48: style:inconclusive: Function 'Jim_ListIndex' argument 2 names different: declaration 'listPrt' definition 'listPtr'. [funcArgNamesDifferent]
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                               ^
jim.h:842:60: note: Function 'Jim_ListIndex' argument 2 names different: declaration 'listPrt' definition 'listPtr'.
JIM_EXPORT int Jim_ListIndex (Jim_Interp *interp, Jim_Obj *listPrt,
                                                           ^
jim.c:7165:48: note: Function 'Jim_ListIndex' argument 2 names different: declaration 'listPrt' definition 'listPtr'.
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                               ^
jim.c:7165:61: style:inconclusive: Function 'Jim_ListIndex' argument 3 names different: declaration 'listindex' definition 'idx'. [funcArgNamesDifferent]
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                                            ^
jim.h:843:13: note: Function 'Jim_ListIndex' argument 3 names different: declaration 'listindex' definition 'idx'.
        int listindex, Jim_Obj **objPtrPtr, int seterr);
            ^
jim.c:7165:61: note: Function 'Jim_ListIndex' argument 3 names different: declaration 'listindex' definition 'idx'.
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                                            ^
jim.c:7165:91: style:inconclusive: Function 'Jim_ListIndex' argument 5 names different: declaration 'seterr' definition 'flags'. [funcArgNamesDifferent]
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                                                                          ^
jim.h:843:49: note: Function 'Jim_ListIndex' argument 5 names different: declaration 'seterr' definition 'flags'.
        int listindex, Jim_Obj **objPtrPtr, int seterr);
                                                ^
jim.c:7165:91: note: Function 'Jim_ListIndex' argument 5 names different: declaration 'seterr' definition 'flags'.
int Jim_ListIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx, Jim_Obj **objPtrPtr, int flags)
                                                                                          ^
jim.c:7228:67: style:inconclusive: Function 'ListSetIndex' argument 3 names different: declaration 'listindex' definition 'idx'. [funcArgNamesDifferent]
static int ListSetIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx,
                                                                  ^
jim.c:138:67: note: Function 'ListSetIndex' argument 3 names different: declaration 'listindex' definition 'idx'.
static int ListSetIndex(Jim_Interp *interp, Jim_Obj *listPtr, int listindex, Jim_Obj *newObjPtr,
                                                                  ^
jim.c:7228:67: note: Function 'ListSetIndex' argument 3 names different: declaration 'listindex' definition 'idx'.
static int ListSetIndex(Jim_Interp *interp, Jim_Obj *listPtr, int idx,
                                                                  ^
jim.c:11096:50: style:inconclusive: Function 'Jim_EvalObjList' argument 2 names different: declaration 'listObj' definition 'listPtr'. [funcArgNamesDifferent]
int Jim_EvalObjList(Jim_Interp *interp, Jim_Obj *listPtr)
                                                 ^
jim.h:694:61: note: Function 'Jim_EvalObjList' argument 2 names different: declaration 'listObj' definition 'listPtr'.
JIM_EXPORT int Jim_EvalObjList(Jim_Interp *interp, Jim_Obj *listObj);
                                                            ^
jim.c:11096:50: note: Function 'Jim_EvalObjList' argument 2 names different: declaration 'listObj' definition 'listPtr'.
int Jim_EvalObjList(Jim_Interp *interp, Jim_Obj *listPtr)
                                                 ^
jim.c:16713:52: style:inconclusive: Function 'Jim_AioFilehandle' argument 2 names different: declaration 'command' definition 'fhObj'. [funcArgNamesDifferent]
int Jim_AioFilehandle(Jim_Interp *interp, Jim_Obj *fhObj)
                                                   ^
jim.h:979:63: note: Function 'Jim_AioFilehandle' argument 2 names different: declaration 'command' definition 'fhObj'.
JIM_EXPORT int Jim_AioFilehandle(Jim_Interp *interp, Jim_Obj *command);
                                                              ^
jim.c:16713:52: note: Function 'Jim_AioFilehandle' argument 2 names different: declaration 'command' definition 'fhObj'.
int Jim_AioFilehandle(Jim_Interp *interp, Jim_Obj *fhObj)
                                                   ^
jim.c:4126:17: style: Local variable 'len' shadows outer variable [shadowVariable]
            int len;
                ^
jim.c:4098:9: note: Shadowed declaration
    int len, i;
        ^
jim.c:4126:17: note: Shadow variable
            int len;
                ^
jim.c:13438:13: style: Local variable 'i' shadows outer variable [shadowVariable]
        int i;
            ^
jim.c:13350:9: note: Shadowed declaration
    int i;
        ^
jim.c:13438:13: note: Shadow variable
        int i;
            ^
jim.c:14889:29: style: Local variable 'i' shadows outer variable [shadowVariable]
                        int i;
                            ^
jim.c:14769:9: note: Shadowed declaration
    int i;
        ^
jim.c:14889:29: note: Shadow variable
                        int i;
                            ^
jim.c:5703:24: style: union member 'Anonymous16::s' is never used. [unusedStructMember]
        unsigned short s;
                       ^
jim.c:12716:16: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
    int result = JIM_ERR;
               ^
jim.c:14930:20: style: Variable 'idx' is assigned a value that is never used. [unreadVariable]
                idx++;
                   ^
jim.c:15618:17: style: Variable 'mode' is assigned a value that is never used. [unreadVariable]
            mode++;             /* JIM_CMDLIST_CHANNELS */
                ^
jimiocompat.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
jimregexp.c:242:39: warning: Either the condition 'exp==NULL' is redundant or there is possible null pointer dereference: exp. [nullPointerRedundantCheck]
 fprintf(stderr, "Compiling: '%s'\n", exp);
                                      ^
jimregexp.c:246:10: note: Assuming that condition 'exp==NULL' is not redundant
 if (exp == NULL)
         ^
jimregexp.c:242:39: note: Null pointer dereference
 fprintf(stderr, "Compiling: '%s'\n", exp);
                                      ^
jimregexp.c:408:6: style: The scope of the variable 'latest' can be reduced. [variableScope]
 int latest;
     ^
jimregexp.c:1075:6: style: The scope of the variable 'temp' can be reduced. [variableScope]
 int temp;
     ^
jimregexp.c:234:44: style:inconclusive: Function 'jim_regcomp' argument 2 names different: declaration 'regex' definition 'exp'. [funcArgNamesDifferent]
int jim_regcomp(regex_t *preg, const char *exp, int cflags)
                                           ^
jimregexp.h:101:44: note: Function 'jim_regcomp' argument 2 names different: declaration 'regex' definition 'exp'.
int jim_regcomp(regex_t *preg, const char *regex, int cflags);
                                           ^
jimregexp.c:234:44: note: Function 'jim_regcomp' argument 2 names different: declaration 'regex' definition 'exp'.
int jim_regcomp(regex_t *preg, const char *exp, int cflags)
                                           ^
jimregexp.c:1277:38: style:inconclusive: Function 'reg_range_find' argument 1 names different: declaration 'string' definition 'range'. [funcArgNamesDifferent]
static int reg_range_find(const int *range, int c)
                                     ^
jimregexp.c:195:38: note: Function 'reg_range_find' argument 1 names different: declaration 'string' definition 'range'.
static int reg_range_find(const int *string, int c);
                                     ^
jimregexp.c:1277:38: note: Function 'reg_range_find' argument 1 names different: declaration 'string' definition 'range'.
static int reg_range_find(const int *range, int c)
                                     ^
jimregexp.c:1731:6: style: The scope of the variable 'next' can be reduced. [variableScope]
 int next;
     ^
jimregexp.c:1802:8: style: Local variable 'i' shadows outer variable [shadowVariable]
   int i;
       ^
jimregexp.c:1734:6: note: Shadowed declaration
 int i;
     ^
jimregexp.c:1802:8: note: Shadow variable
   int i;
       ^
linenoise.c:2165:28: warning: Identical condition 'c=='\r'', second condition is always false [identicalConditionAfterEarlyExit]
        if (c == '\n' || c == '\r') {
                           ^
linenoise.c:2161:15: note: If condition 'c=='\r'' is true, the function will return/exit
        if (c == '\r') {
              ^
linenoise.c:2165:28: note: Testing identical condition 'c=='\r''
        if (c == '\n' || c == '\r') {
                           ^
linenoise.c:1025:11: style: Condition 'c=='['' is always false [knownConditionTrueFalse]
    if (c == '[' && c2 >= '1' && c2 <= '8') {
          ^
linenoise.c:1008:11: note: Assuming that condition 'c=='['' is not redundant
    if (c == '[' || c == 'O') {
          ^
linenoise.c:1025:11: note: Condition 'c=='['' is always false
    if (c == '[' && c2 >= '1' && c2 <= '8') {
          ^
linenoise.c:1621:56: style: Condition '(last&0x80)==0' is always true [knownConditionTrueFalse]
            if (current->colsleft > 0 && (last & 0x80) == 0) {
                                                       ^
linenoise.c:1619:25: note: Assignment 'last=0', assigned value is 0
            char last = 0;
                        ^
linenoise.c:1621:56: note: Condition '(last&0x80)==0' is always true
            if (current->colsleft > 0 && (last & 0x80) == 0) {
                                                       ^
linenoise.c:1635:16: style: Condition 'rc==2' is always false [knownConditionTrueFalse]
        if (rc == 2) {
               ^
linenoise.c:1604:18: note: Assignment 'rc=1', assigned value is 1
        int rc = 1;
                 ^
linenoise.c:1635:16: note: Condition 'rc==2' is always false
        if (rc == 2) {
               ^
linenoise.c:1646:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        return 1;
        ^
linenoise.c:2181:9: style: The scope of the variable 'count' can be reduced. [variableScope]
    int count;
        ^
linenoise.c:1183:91: style:inconclusive: Function 'linenoiseSetCompletionCallback' argument 1 names different: declaration 'comp' definition 'fn'. [funcArgNamesDifferent]
linenoiseCompletionCallback * linenoiseSetCompletionCallback(linenoiseCompletionCallback *fn, void *userdata) {
                                                                                          ^
linenoise.h:55:91: note: Function 'linenoiseSetCompletionCallback' argument 1 names different: declaration 'comp' definition 'fn'.
linenoiseCompletionCallback * linenoiseSetCompletionCallback(linenoiseCompletionCallback *comp, void *userdata);
                                                                                          ^
linenoise.c:1183:91: note: Function 'linenoiseSetCompletionCallback' argument 1 names different: declaration 'comp' definition 'fn'.
linenoiseCompletionCallback * linenoiseSetCompletionCallback(linenoiseCompletionCallback *fn, void *userdata) {
                                                                                          ^
linenoise.c:1190:51: style:inconclusive: Function 'linenoiseAddCompletion' argument 1 names different: declaration 'comp' definition 'lc'. [funcArgNamesDifferent]
void linenoiseAddCompletion(linenoiseCompletions *lc, const char *str) {
                                                  ^
linenoise.h:61:51: note: Function 'linenoiseAddCompletion' argument 1 names different: declaration 'comp' definition 'lc'.
void linenoiseAddCompletion(linenoiseCompletions *comp, const char *str);
                                                  ^
linenoise.c:1190:51: note: Function 'linenoiseAddCompletion' argument 1 names different: declaration 'comp' definition 'lc'.
void linenoiseAddCompletion(linenoiseCompletions *lc, const char *str) {
                                                  ^
linenoise.c:1947:0: information: Skipping configuration 'SIGTSTP' since the value of 'SIGTSTP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            raise(SIGTSTP);
^
linenoise.c:875:11: style: Condition 'n<1' is always false [knownConditionTrueFalse]
    if (n < 1) {
          ^
linenoise.c:874:9: note: Assignment 'n=1', assigned value is 1
    n = utf8_charlen(buf[0]);
        ^
linenoise.c:875:11: note: Condition 'n<1' is always false
    if (n < 1) {
          ^
linenoise-win32.c:221:22: warning: The address of local variable 'nohighlight' might be accessed at non-zero index. [objectIndex]
        switch (props[i]) {
                     ^
linenoise.c:1057:33: note: Address of variable taken here.
    setOutputHighlight(current, &nohighlight, 1);
                                ^
linenoise.c:1057:33: note: Calling function 'setOutputHighlight', 2nd argument '&nohighlight' value is lifetime=nohighlight
    setOutputHighlight(current, &nohighlight, 1);
                                ^
linenoise-win32.c:221:22: note: The address of local variable 'nohighlight' might be accessed at non-zero index.
        switch (props[i]) {
                     ^
linenoise-win32.c:221:22: warning: The address of local variable 'reverse' might be accessed at non-zero index. [objectIndex]
        switch (props[i]) {
                     ^
linenoise.c:1063:33: note: Address of variable taken here.
    setOutputHighlight(current, &reverse, 1);
                                ^
linenoise.c:1063:33: note: Calling function 'setOutputHighlight', 2nd argument '&reverse' value is lifetime=reverse
    setOutputHighlight(current, &reverse, 1);
                                ^
linenoise-win32.c:221:22: note: The address of local variable 'reverse' might be accessed at non-zero index.
        switch (props[i]) {
                     ^
sqlite3/jim-sqlite.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
sqlite3/jim-sqlite.c:863:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLITE_OK;
       ^
sqlite3/jim-sqlite.c:859:6: note: rc is assigned
  rc = Jim_EvalGlobal(pDb->interp, Jim_String(str));
     ^
sqlite3/jim-sqlite.c:863:8: note: rc is overwritten
    rc = SQLITE_OK;
       ^
sqlite3/jim-sqlite.c:433:20: style: The scope of the variable 'pPreStmt' can be reduced. [variableScope]
  SqlPreparedStmt *pPreStmt;
                   ^
sqlite3/jim-sqlite.c:1268:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;                        /* Iterator variable */
        ^
sqlite3/jim-sqlite.c:1316:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
    int rc;
        ^
sqlite3/jim-sqlite.c:1861:10: style: The scope of the variable 'zLineNum' can be reduced. [variableScope]
    char zLineNum[80];          /* Line number print buffer */
         ^
sqlite3/jim-sqlite.c:1081:15: error: Uninitialized variable: nVar [uninitvar]
  for(i=1; i<=nVar; i++){
              ^
sqlite3/jim-sqlite.c:1045:15: note: Assuming condition is false
  if( pPreStmt==0 ){
              ^
sqlite3/jim-sqlite.c:1081:15: note: Uninitialized variable: nVar
  for(i=1; i<=nVar; i++){
              ^
sqlite3/jim-sqlite.c:915:11: style: Variable 'eol' is assigned a value that is never used. [unreadVariable]
      eol = 1;
          ^
sqlite3/jim-sqlite.c:2366:10: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
    pKey = Jim_GetString(objv[2], &nKey);
         ^
sqlite3/jim-sqlite.c:2692:20: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
  const char *pKey = 0;
                   ^
sqlite3/jim-sqlite.c:2722:12: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
      pKey = Jim_GetString(objv[i+1], &nKey);
           ^
sqlite3/sqlite3.h:291:0: information: Skipping configuration 'SQLITE_INT64_TYPE' since the value of 'SQLITE_INT64_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  typedef SQLITE_INT64_TYPE sqlite_int64;
^
sqlite3/sqlite3.h:295:0: information: Skipping configuration 'SQLITE_INT64_TYPE' since the value of 'SQLITE_INT64_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;
^
sqlite3/sqlite3.h:291:0: information: Skipping configuration 'SQLITE_INT64_TYPE;SQLITE_UINT64_TYPE' since the value of 'SQLITE_INT64_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  typedef SQLITE_INT64_TYPE sqlite_int64;
^
sqlite3/sqlite3.h:293:0: information: Skipping configuration 'SQLITE_INT64_TYPE;SQLITE_UINT64_TYPE' since the value of 'SQLITE_UINT64_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    typedef SQLITE_UINT64_TYPE sqlite_uint64;
^
sqlite3/jim-sqlite.c:1566:5: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    break;
    ^
sqlite3/shell.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
sqlite3/shell.c:2412:11: style: Assignment 'c='"'' is redundant with condition 'c=='"''. [duplicateConditionalAssign]
        c = '"';
          ^
sqlite3/shell.c:2411:18: note: Condition 'c=='"''
      }else if( c=='"' ){
                 ^
sqlite3/shell.c:2412:11: note: Assignment 'c='"'' is redundant
        c = '"';
          ^
sqlite3/shell.c:2414:11: style: Assignment 'c='\''' is redundant with condition 'c=='\'''. [duplicateConditionalAssign]
        c = '\'';
          ^
sqlite3/shell.c:2413:18: note: Condition 'c=='\'''
      }else if( c=='\'' ){
                 ^
sqlite3/shell.c:2414:11: note: Assignment 'c='\''' is redundant
        c = '\'';
          ^
sqlite3/shell.c:2416:11: style: Assignment 'c='\\'' is redundant with condition 'c=='\\''. [duplicateConditionalAssign]
        c = '\\';
          ^
sqlite3/shell.c:2415:18: note: Condition 'c=='\\''
      }else if( c=='\\' ){
                 ^
sqlite3/shell.c:2416:11: note: Assignment 'c='\\'' is redundant
        c = '\\';
          ^
sqlite3/shell.c:3843:14: style: Condition 'p->db!=0' is always false [knownConditionTrueFalse]
    if( p->db!=0 ){
             ^
sqlite3/shell.c:3839:13: note: Assignment 'p->db=0', assigned value is 0
    p->db = 0;
            ^
sqlite3/shell.c:3843:14: note: Condition 'p->db!=0' is always false
    if( p->db!=0 ){
             ^
sqlite3/shell.c:4920:9: style: Condition 'zLine' is always true [knownConditionTrueFalse]
    if( zLine && zLine[0]=='.' && nSql==0 ){
        ^
sqlite3/shell.c:4906:14: note: Assuming that condition 'zLine==0' is not redundant
    if( zLine==0 ){
             ^
sqlite3/shell.c:4916:17: note: Assuming condition is false
    if( nSql==0 && _all_whitespace(zLine) ){
                ^
sqlite3/shell.c:4920:9: note: Condition 'zLine' is always true
    if( zLine && zLine[0]=='.' && nSql==0 ){
        ^
sqlite3/shell.c:1382:31: warning: Either the condition 'z==0' is redundant or there is possible null pointer dereference: z. [nullPointerRedundantCheck]
    utf8_printf(p->out, "%s", z);
                              ^
sqlite3/shell.c:1386:10: note: Assuming that condition 'z==0' is not redundant
    if( z==0 ) z = "";
         ^
sqlite3/shell.c:1382:31: note: Null pointer dereference
    utf8_printf(p->out, "%s", z);
                              ^
sqlite3/shell.c:1749:16: warning: Either the condition 'pArg' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  sqlite3_free(p->aiIndent);
               ^
sqlite3/shell.c:1960:11: note: Assuming that condition 'pArg' is not redundant
      if( pArg && pArg->statsOn ){
          ^
sqlite3/shell.c:1957:27: note: Calling function 'explain_data_delete', 1st argument 'pArg' value is 0
      explain_data_delete(pArg);
                          ^
sqlite3/shell.c:1749:16: note: Null pointer dereference
  sqlite3_free(p->aiIndent);
               ^
sqlite3/shell.c:1750:3: warning: Either the condition 'pArg' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  p->aiIndent = 0;
  ^
sqlite3/shell.c:1960:11: note: Assuming that condition 'pArg' is not redundant
      if( pArg && pArg->statsOn ){
          ^
sqlite3/shell.c:1957:27: note: Calling function 'explain_data_delete', 1st argument 'pArg' value is 0
      explain_data_delete(pArg);
                          ^
sqlite3/shell.c:1750:3: note: Null pointer dereference
  p->aiIndent = 0;
  ^
sqlite3/shell.c:1751:3: warning: Either the condition 'pArg' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  p->nIndent = 0;
  ^
sqlite3/shell.c:1960:11: note: Assuming that condition 'pArg' is not redundant
      if( pArg && pArg->statsOn ){
          ^
sqlite3/shell.c:1957:27: note: Calling function 'explain_data_delete', 1st argument 'pArg' value is 0
      explain_data_delete(pArg);
                          ^
sqlite3/shell.c:1751:3: note: Null pointer dereference
  p->nIndent = 0;
  ^
sqlite3/shell.c:1752:3: warning: Either the condition 'pArg' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  p->iIndent = 0;
  ^
sqlite3/shell.c:1960:11: note: Assuming that condition 'pArg' is not redundant
      if( pArg && pArg->statsOn ){
          ^
sqlite3/shell.c:1957:27: note: Calling function 'explain_data_delete', 1st argument 'pArg' value is 0
      explain_data_delete(pArg);
                          ^
sqlite3/shell.c:1752:3: note: Null pointer dereference
  p->iIndent = 0;
  ^
sqlite3/shell.c:1894:14: warning: Either the condition 'zStmtSql' is redundant or there is possible null pointer dereference: zStmtSql. [nullPointerRedundantCheck]
      while( IsSpace(zStmtSql[0]) ) zStmtSql++;
             ^
sqlite3/shell.c:1904:40: note: Assuming that condition 'zStmtSql' is not redundant
        utf8_printf(pArg->out, "%s\n", zStmtSql ? zStmtSql : zSql);
                                       ^
sqlite3/shell.c:1894:14: note: Null pointer dereference
      while( IsSpace(zStmtSql[0]) ) zStmtSql++;
             ^
sqlite3/shell.c:4856:10: warning: Either the condition 'zLine' is redundant or there is possible null pointer dereference: zLine. [nullPointerRedundantCheck]
  while( IsSpace(zLine[0]) ){ zLine++; };
         ^
sqlite3/shell.c:4920:9: note: Assuming that condition 'zLine' is not redundant
    if( zLine && zLine[0]=='.' && nSql==0 ){
        ^
sqlite3/shell.c:4930:36: note: Calling function 'line_is_command_terminator', 1st argument 'zLine' value is 0
    if( line_is_command_terminator(zLine) && line_is_complete(zSql, nSql) ){
                                   ^
sqlite3/shell.c:4856:10: note: Null pointer dereference
  while( IsSpace(zLine[0]) ){ zLine++; };
         ^
sqlite3/shell.c:3201:7: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
      if( booleanValue(azArg[1]) ){
      ^
sqlite3/shell.c:3203:8: note: Found duplicate branches for 'if' and 'else'.
      }else{
       ^
sqlite3/shell.c:3201:7: note: Found duplicate branches for 'if' and 'else'.
      if( booleanValue(azArg[1]) ){
      ^
sqlite3/shell.c:989:18: style: The scope of the variable 'n' can be reduced. [variableScope]
          int w, n;
                 ^
sqlite3/shell.c:1066:11: style: The scope of the variable 'nParen' can be reduced. [variableScope]
      int nParen = 0;
          ^
sqlite3/shell.c:1067:12: style: The scope of the variable 'cEnd' can be reduced. [variableScope]
      char cEnd = 0;
           ^
sqlite3/shell.c:1069:11: style: The scope of the variable 'nLine' can be reduced. [variableScope]
      int nLine = 0;
          ^
sqlite3/shell.c:1366:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
sqlite3/shell.c:1880:24: style: The scope of the variable 'zStmtSql' can be reduced. [variableScope]
    static const char *zStmtSql;
                       ^
sqlite3/shell.c:1999:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
sqlite3/shell.c:4474:11: style: The scope of the variable 'len' can be reduced. [variableScope]
      int len, maxlen = 0;
          ^
sqlite3/shell.c:5560:11: style: The scope of the variable 'nHistory' can be reduced. [variableScope]
      int nHistory;
          ^
sqlite3/shell.c:599:7: style: struct member 'SavedModeInfo::valid' is never used. [unusedStructMember]
  int valid;          /* Is there legit data in here? */
      ^
sqlite3/shell.c:1807:12: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
        rc = SQLITE_NOMEM;
           ^
sqlite3/shell.c:5266:0: information: Skipping configuration 'SIGINT' since the value of 'SIGINT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  signal(SIGINT, interrupt_handler);
^
sqlite3/shell.c:4297:14: style: The scope of the variable 'v' can be reduced. [variableScope]
      int i, v;
             ^
sqlite3/shell.c:4304:28: style: The scope of the variable 'v' can be reduced. [variableScope]
      int i; sqlite3_int64 v;
                           ^
sqlite3/sqlite3.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 479 configurations. Use --force to check all configurations. [toomanyconfigs]

^
sqlite3/sqlite3.c:24676:3: portability: Returning an integer in a function with pointer return type is not portable. [CastIntegerToAddressAtReturn]
  return pVfs->xDlSym(pVfs, pHdle, zSym);
  ^
sqlite3/sqlite3.c:49706:3: portability: Returning an integer in a function with pointer return type is not portable. [CastIntegerToAddressAtReturn]
  return ORIGVFS(pVfs)->xDlSym(ORIGVFS(pVfs), p, zSym);
  ^
sqlite3/sqlite3.c:101664:11: warning: Assert statement calls a function which may have desired side effects: 'sqlite3ExprIsInteger'. [assertWithSideEffect]
  assert( sqlite3ExprIsInteger(pE, &i)==0 );
          ^
sqlite3/sqlite3.c:104837:15: warning: Assert statement calls a function which may have desired side effects: 'sqlite3GetInt32'. [assertWithSideEffect]
           || sqlite3GetInt32(p->u.zToken, &rc)==0 );
              ^
sqlite3/sqlite3.c:122091:22: warning: Assert statement calls a function which may have desired side effects: 'sqlite3_value_blob'. [assertWithSideEffect]
      assert( zBlob==sqlite3_value_blob(pValue) ); /* No encoding change */
                     ^
sqlite3/sqlite3.c:122218:18: warning: Assert statement calls a function which may have desired side effects: 'sqlite3_value_blob'. [assertWithSideEffect]
  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */
                 ^
sqlite3/sqlite3.c:172439:38: warning: Assert statement modifies 'x'. [assignmentInAssert]
      assert( /*side-effects-ok*/ (x = va_arg(ap,int))!=0 );
                                     ^
sqlite3/sqlite3.c:133802:3: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
  db->pParse = &sParse;
  ^
sqlite3/sqlite3.c:135317:7: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
      pSort->pDeferredRowLoad = &sRowLoadInfo;
      ^
sqlite3/sqlite3.c:141901:3: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
  *pazResult = &res.azResult[1];
  ^
sqlite3/sqlite3.c:64586:45: style:inconclusive: Boolean expression '*(char*)(&sqlite3one)==0' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
    sqlite3Put4byte(&aWalHdr[0], (WAL_MAGIC | SQLITE_BIGENDIAN));
                                            ^
sqlite3/sqlite3.c:22760:39: warning: Either the condition 'op>=0' is redundant or the array 'statMutex[10]' is accessed at index -1, which is out of bounds. [negativeIndex]
  assert( sqlite3_mutex_held(statMutex[op] ? sqlite3Pcache1Mutex()
                                      ^
sqlite3/sqlite3.c:22762:13: note: Assuming that condition 'op>=0' is not redundant
  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );
            ^
sqlite3/sqlite3.c:22760:39: note: Negative array index
  assert( sqlite3_mutex_held(statMutex[op] ? sqlite3Pcache1Mutex()
                                      ^
sqlite3/sqlite3.c:73281:27: error: Array 'pCArray->apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
  pSrcEnd = pCArray->apEnd[k];
                          ^
sqlite3/sqlite3.c:73280:3: note: After for loop, k has value 6
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
  ^
sqlite3/sqlite3.c:73281:27: note: Array index out of bounds
  pSrcEnd = pCArray->apEnd[k];
                          ^
sqlite3/sqlite3.c:73364:24: error: Array 'pCArray->apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
  pEnd = pCArray->apEnd[k];
                       ^
sqlite3/sqlite3.c:73363:3: note: After for loop, k has value 6
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
  ^
sqlite3/sqlite3.c:73364:24: note: Array index out of bounds
  pEnd = pCArray->apEnd[k];
                       ^
sqlite3/sqlite3.c:74466:22: error: Array 'b.apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
    pSrcEnd = b.apEnd[k];
                     ^
sqlite3/sqlite3.c:74465:5: note: After for loop, k has value 6
    for(k=0; b.ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
    ^
sqlite3/sqlite3.c:74466:22: note: Array index out of bounds
    pSrcEnd = b.apEnd[k];
                     ^
sqlite3/sqlite3.c:33434:14: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
    for(i=0; sqlite3Isxdigit(zNum[i]) && i<8; i++){
             ^
sqlite3/sqlite3.c:73280:25: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
                        ^
sqlite3/sqlite3.c:73363:25: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
                        ^
sqlite3/sqlite3.c:74465:20: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
    for(k=0; b.ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
                   ^
sqlite3/sqlite3.c:33428:17: error: The address of local variable 'z' is accessed at non-zero index. [objectIndex]
        && (zNum[1]=='x' || zNum[1]=='X')
                ^
sqlite3/sqlite3.c:165535:50: note: Address of variable taken here.
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
sqlite3/sqlite3.c:165535:50: note: Calling function 'sqlite3GetInt32', 1st argument '&t.z[1]' value is lifetime=z
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
sqlite3/sqlite3.c:33428:17: note: The address of local variable 'z' is accessed at non-zero index.
        && (zNum[1]=='x' || zNum[1]=='X')
                ^
sqlite3/sqlite3.c:33429:12: error: The address of local variable 'z' is accessed at non-zero index. [objectIndex]
        && sqlite3Isxdigit(zNum[2])
           ^
sqlite3/sqlite3.c:165535:50: note: Address of variable taken here.
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
sqlite3/sqlite3.c:165535:50: note: Calling function 'sqlite3GetInt32', 1st argument '&t.z[1]' value is lifetime=z
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
sqlite3/sqlite3.c:33429:12: note: The address of local variable 'z' is accessed at non-zero index.
        && sqlite3Isxdigit(zNum[2])
           ^
sqlite3/sqlite3.c:61665:24: warning: The address of local variable 'h1' might be accessed at non-zero index. [objectIndex]
  u32 *aEnd = (u32 *)&a[nByte];
                       ^
sqlite3/sqlite3.c:63282:28: note: Address of variable taken here.
  walChecksumBytes(1, (u8*)&h1, sizeof(h1)-sizeof(h1.aCksum), 0, aCksum);
                           ^
sqlite3/sqlite3.c:63282:23: note: Calling function 'walChecksumBytes', 2nd argument '(unsigned char*)&h1' value is lifetime=h1
  walChecksumBytes(1, (u8*)&h1, sizeof(h1)-sizeof(h1.aCksum), 0, aCksum);
                      ^
sqlite3/sqlite3.c:61665:24: note: The address of local variable 'h1' might be accessed at non-zero index.
  u32 *aEnd = (u32 *)&a[nByte];
                       ^
sqlite3/sqlite3.c:62595:23: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
      logpage = aRight[iRight++];
                      ^
sqlite3/sqlite3.c:62659:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
sqlite3/sqlite3.c:62659:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
sqlite3/sqlite3.c:62595:23: note: The address of local variable 'aMerge' might be accessed at non-zero index.
      logpage = aRight[iRight++];
                      ^
sqlite3/sqlite3.c:62595:23: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
      logpage = aRight[iRight++];
                      ^
sqlite3/sqlite3.c:62672:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
sqlite3/sqlite3.c:62672:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
sqlite3/sqlite3.c:62595:23: note: The address of local variable 'aMerge' might be accessed at non-zero index.
      logpage = aRight[iRight++];
                      ^
sqlite3/sqlite3.c:62603:46: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
sqlite3/sqlite3.c:62659:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
sqlite3/sqlite3.c:62659:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
sqlite3/sqlite3.c:62603:46: note: The address of local variable 'aMerge' might be accessed at non-zero index.
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
sqlite3/sqlite3.c:62603:46: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
sqlite3/sqlite3.c:62672:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
sqlite3/sqlite3.c:62672:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
sqlite3/sqlite3.c:62603:46: note: The address of local variable 'aMerge' might be accessed at non-zero index.
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
sqlite3/sqlite3.c:79444:17: warning: The address of local variable 'zToken' might be accessed at non-zero index. [objectIndex]
    assert( zVal[nVal]=='\'' );
                ^
sqlite3/sqlite3.c:79442:12: note: Address of variable taken here.
    zVal = &pExpr->u.zToken[2];
           ^
sqlite3/sqlite3.c:79444:17: note: The address of local variable 'zToken' might be accessed at non-zero index.
    assert( zVal[nVal]=='\'' );
                ^
sqlite3/sqlite3.c:106587:16: warning: The address of local variable 'zToken' might be accessed at non-zero index. [objectIndex]
      assert( z[n]=='\'' );
               ^
sqlite3/sqlite3.c:106585:11: note: Address of variable taken here.
      z = &pExpr->u.zToken[2];
          ^
sqlite3/sqlite3.c:106587:16: note: The address of local variable 'zToken' might be accessed at non-zero index.
      assert( z[n]=='\'' );
               ^
sqlite3/sqlite3.c:123000:33: error: The address of local variable 'likeInfoAlt' is accessed at non-zero index. [objectIndex]
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                                ^
sqlite3/sqlite3.c:123000:20: note: Address of variable taken here.
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                   ^
sqlite3/sqlite3.c:123000:33: note: The address of local variable 'likeInfoAlt' is accessed at non-zero index.
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                                ^
sqlite3/sqlite3.c:123001:33: error: The address of local variable 'likeInfoAlt' is accessed at non-zero index. [objectIndex]
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                                ^
sqlite3/sqlite3.c:123001:20: note: Address of variable taken here.
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                   ^
sqlite3/sqlite3.c:123001:33: note: The address of local variable 'likeInfoAlt' is accessed at non-zero index.
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                                ^
sqlite3/sqlite3.c:124380:16: warning: The address of local variable 'iCol' might be accessed at non-zero index. [objectIndex]
      if( aiCol[i]==pTab->iPKey ){
               ^
sqlite3/sqlite3.c:124377:15: note: Address of variable taken here.
      aiCol = &iCol;
              ^
sqlite3/sqlite3.c:124380:16: note: The address of local variable 'iCol' might be accessed at non-zero index.
      if( aiCol[i]==pTab->iPKey ){
               ^
sqlite3/sqlite3.c:124381:14: warning: The address of local variable 'iCol' might be accessed at non-zero index. [objectIndex]
        aiCol[i] = -1;
             ^
sqlite3/sqlite3.c:124377:15: note: Address of variable taken here.
      aiCol = &iCol;
              ^
sqlite3/sqlite3.c:124381:14: note: The address of local variable 'iCol' might be accessed at non-zero index.
        aiCol[i] = -1;
             ^
sqlite3/sqlite3.c:126803:18: warning: The address of local variable 'aIdx' might be accessed at non-zero index. [objectIndex]
        if( bUsed[jj] ) continue;
                 ^
sqlite3/sqlite3.c:126785:20: note: Address of variable taken here.
      bUsed = (u8*)&sIdxIter.u.ax.aIdx[nIdx];
                   ^
sqlite3/sqlite3.c:126803:18: note: The address of local variable 'aIdx' might be accessed at non-zero index.
        if( bUsed[jj] ) continue;
                 ^
sqlite3/sqlite3.c:63845:10: warning: Identical condition and return expression 'rc', return value is always 0 [identicalConditionAfterEarlyExit]
  return rc;
         ^
sqlite3/sqlite3.c:63797:7: note: If condition 'rc' is true, the function will return/exit
  if( rc ){
      ^
sqlite3/sqlite3.c:63845:10: note: Returning identical expression 'rc'
  return rc;
         ^
sqlite3/sqlite3.c:41059:7: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( isDelete )                ctrlFlags |= UNIXFILE_DELETE;
      ^
sqlite3/sqlite3.c:41025:7: note: First condition
  if( isDelete ){
      ^
sqlite3/sqlite3.c:41059:7: note: Second condition
  if( isDelete )                ctrlFlags |= UNIXFILE_DELETE;
      ^
sqlite3/sqlite3.c:58038:16: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( nPathname>0 ){
               ^
sqlite3/sqlite3.c:58027:16: note: First condition
  if( nPathname>0 ){
               ^
sqlite3/sqlite3.c:58038:16: note: Second condition
  if( nPathname>0 ){
               ^
sqlite3/sqlite3.c:64750:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( isCommit ){
        ^
sqlite3/sqlite3.c:64745:9: note: First condition
    if( isCommit ){
        ^
sqlite3/sqlite3.c:64750:9: note: Second condition
    if( isCommit ){
        ^
sqlite3/sqlite3.c:32433:7: style: Condition 'bom' is always false [knownConditionTrueFalse]
  if( bom ){
      ^
sqlite3/sqlite3.c:32419:12: note: Assignment 'bom=0', assigned value is 0
  u8 bom = 0;
           ^
sqlite3/sqlite3.c:32433:7: note: Condition 'bom' is always false
  if( bom ){
      ^
sqlite3/sqlite3.c:137770:13: style: Condition 'pSplit->pPrior' is always false [knownConditionTrueFalse]
  if( pSplit->pPrior ){
            ^
sqlite3/sqlite3.c:137613:20: note: Assignment 'pSplit->pPrior=0', assigned value is 0
  pSplit->pPrior = 0;
                   ^
sqlite3/sqlite3.c:137770:13: note: Condition 'pSplit->pPrior' is always false
  if( pSplit->pPrior ){
            ^
sqlite3/sqlite3.c:142877:9: style: Condition '!db->mallocFailed' is always true [knownConditionTrueFalse]
     && ALWAYS(!db->mallocFailed)
        ^
sqlite3/sqlite3.c:142864:7: note: Assuming that condition '!db->mallocFailed' is not redundant
  if( !db->mallocFailed ){
      ^
sqlite3/sqlite3.c:142877:9: note: Condition '!db->mallocFailed' is always true
     && ALWAYS(!db->mallocFailed)
        ^
sqlite3/sqlite3.c:149469:15: style: Condition 'bStopAtNull' is always false [knownConditionTrueFalse]
    }else if( bStopAtNull ){
              ^
sqlite3/sqlite3.c:149230:22: note: Assignment 'bStopAtNull=0', assigned value is 0
    u8 bStopAtNull = 0;          /* Add condition to terminate at NULLs */
                     ^
sqlite3/sqlite3.c:149469:15: note: Condition 'bStopAtNull' is always false
    }else if( bStopAtNull ){
              ^
sqlite3/sqlite3.c:155946:19: style: Condition 'sCur.n==0' is always true [knownConditionTrueFalse]
        if( sCur.n==0 ){
                  ^
sqlite3/sqlite3.c:155923:18: note: Assignment 'sCur.n=0', assigned value is 0
        sCur.n = 0;
                 ^
sqlite3/sqlite3.c:155946:19: note: Condition 'sCur.n==0' is always true
        if( sCur.n==0 ){
                  ^
sqlite3/sqlite3.c:55038:41: style: Expression '(X & 0x4) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_MEMORY   & 5)!=1 );
                                        ^
sqlite3/sqlite3.c:55039:41: style: Expression '(X & 0x2) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_OFF      & 5)!=1 );
                                        ^
sqlite3/sqlite3.c:55041:41: style: Expression '(X & 0x0) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_DELETE   & 5)!=1 );
                                        ^
sqlite3/sqlite3.c:25226:3: error: Common realloc mistake: 'p' nulled but not freed upon failure [memleakOnRealloc]
  p = SQLITE_REALLOC(p, nByte+8 );
  ^
sqlite3/sqlite3.c:39459:3: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  pShmNode->nRef++;
  ^
sqlite3/sqlite3.c:39382:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
sqlite3/sqlite3.c:39459:3: note: Null pointer dereference
  pShmNode->nRef++;
  ^
sqlite3/sqlite3.c:39470:23: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  sqlite3_mutex_enter(pShmNode->pShmMutex);
                      ^
sqlite3/sqlite3.c:39382:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
sqlite3/sqlite3.c:39470:23: note: Null pointer dereference
  sqlite3_mutex_enter(pShmNode->pShmMutex);
                      ^
sqlite3/sqlite3.c:39471:14: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  p->pNext = pShmNode->pFirst;
             ^
sqlite3/sqlite3.c:39382:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
sqlite3/sqlite3.c:39471:14: note: Null pointer dereference
  p->pNext = pShmNode->pFirst;
             ^
sqlite3/sqlite3.c:39472:3: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  pShmNode->pFirst = p;
  ^
sqlite3/sqlite3.c:39382:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
sqlite3/sqlite3.c:39472:3: note: Null pointer dereference
  pShmNode->pFirst = p;
  ^
sqlite3/sqlite3.c:39473:23: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  sqlite3_mutex_leave(pShmNode->pShmMutex);
                      ^
sqlite3/sqlite3.c:39382:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
sqlite3/sqlite3.c:39473:23: note: Null pointer dereference
  sqlite3_mutex_leave(pShmNode->pShmMutex);
                      ^
sqlite3/sqlite3.c:39524:14: warning: Either the condition 'pDbFd->pShm==0' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  pShmNode = p->pShmNode;
             ^
sqlite3/sqlite3.c:39518:18: note: Assuming that condition 'pDbFd->pShm==0' is not redundant
  if( pDbFd->pShm==0 ){
                 ^
sqlite3/sqlite3.c:39523:12: note: Assignment 'p=pDbFd->pShm', assigned value is 0
  p = pDbFd->pShm;
           ^
sqlite3/sqlite3.c:39524:14: note: Null pointer dereference
  pShmNode = p->pShmNode;
             ^
sqlite3/sqlite3.c:50235:10: warning: Either the condition '!pBt->pHasContent' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  return p->iSize;
         ^
sqlite3/sqlite3.c:66738:9: note: Assuming that condition '!pBt->pHasContent' is not redundant
    if( !pBt->pHasContent ){
        ^
sqlite3/sqlite3.c:66742:51: note: Calling function 'sqlite3BitvecSize', 1st argument 'pBt->pHasContent' value is 0
  if( rc==SQLITE_OK && pgno<=sqlite3BitvecSize(pBt->pHasContent) ){
                                                  ^
sqlite3/sqlite3.c:50235:10: note: Null pointer dereference
  return p->iSize;
         ^
sqlite3/sqlite3.c:71815:3: warning: Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: pIdxKey. [nullPointerRedundantCheck]
  pIdxKey->errCode = 0;
  ^
sqlite3/sqlite3.c:71835:30: note: Assuming that condition 'pIdxKey' is not redundant
  assert( pCur->curIntKey || pIdxKey );
                             ^
sqlite3/sqlite3.c:71815:3: note: Null pointer dereference
  pIdxKey->errCode = 0;
  ^
sqlite3/sqlite3.c:71816:11: warning: Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: pIdxKey. [nullPointerRedundantCheck]
  assert( pIdxKey->default_rc==1
          ^
sqlite3/sqlite3.c:71835:30: note: Assuming that condition 'pIdxKey' is not redundant
  assert( pCur->curIntKey || pIdxKey );
                             ^
sqlite3/sqlite3.c:71816:11: note: Null pointer dereference
  assert( pIdxKey->default_rc==1
          ^
sqlite3/sqlite3.c:84638:7: warning: Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  if( p->pKeyInfo->nAllField<=13 ){
      ^
sqlite3/sqlite3.c:71835:30: note: Assuming that condition 'pIdxKey' is not redundant
  assert( pCur->curIntKey || pIdxKey );
                             ^
sqlite3/sqlite3.c:71814:43: note: Calling function 'sqlite3VdbeFindCompare', 1st argument 'pIdxKey' value is 0
  xRecordCompare = sqlite3VdbeFindCompare(pIdxKey);
                                          ^
sqlite3/sqlite3.c:84638:7: note: Null pointer dereference
  if( p->pKeyInfo->nAllField<=13 ){
      ^
sqlite3/sqlite3.c:133943:4: warning: Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt. [nullPointerRedundantCheck]
  *ppStmt = 0;
   ^
sqlite3/sqlite3.c:134063:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );
                                 ^
sqlite3/sqlite3.c:134062:20: note: Calling function 'sqlite3LockAndPrepare', 6th argument 'ppStmt' value is 0
                 0,ppStmt,pzTail);
                   ^
sqlite3/sqlite3.c:133943:4: note: Null pointer dereference
  *ppStmt = 0;
   ^
sqlite3/sqlite3.c:134091:4: warning: Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt. [nullPointerRedundantCheck]
  *ppStmt = 0;
   ^
sqlite3/sqlite3.c:134139:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */
                                 ^
sqlite3/sqlite3.c:134138:42: note: Calling function 'sqlite3Prepare16', 5th argument 'ppStmt' value is 0
  rc = sqlite3Prepare16(db,zSql,nBytes,0,ppStmt,pzTail);
                                         ^
sqlite3/sqlite3.c:134091:4: note: Null pointer dereference
  *ppStmt = 0;
   ^
sqlite3/sqlite3.c:136286:11: warning: Either the condition 'pColExpr!=0' is redundant or there is possible null pointer dereference: pColExpr. [nullPointerRedundantCheck]
      if( pColExpr->op==TK_COLUMN
          ^
sqlite3/sqlite3.c:136282:14: note: Assuming that condition 'pColExpr!=0' is not redundant
      while( ALWAYS(pColExpr!=0) && pColExpr->op==TK_DOT ){
             ^
sqlite3/sqlite3.c:136286:11: note: Null pointer dereference
      if( pColExpr->op==TK_COLUMN
          ^
sqlite3/sqlite3.c:137839:27: warning: Either the condition 'pSubst->pEList!=0' is redundant or there is possible null pointer dereference: pSubst->pEList. [nullPointerRedundantCheck]
      Expr *pCopy = pSubst->pEList->a[pExpr->iColumn].pExpr;
                          ^
sqlite3/sqlite3.c:137841:29: note: Assuming that condition 'pSubst->pEList!=0' is not redundant
      assert( pSubst->pEList!=0 && pExpr->iColumn<pSubst->pEList->nExpr );
                            ^
sqlite3/sqlite3.c:137839:27: note: Null pointer dereference
      Expr *pCopy = pSubst->pEList->a[pExpr->iColumn].pExpr;
                          ^
sqlite3/sqlite3.c:172879:10: warning: Either the condition 'zFilename' is redundant or there is possible null pointer dereference: zFilename. [nullPointerRedundantCheck]
  return zFilename[0] ? zFilename : 0;
         ^
sqlite3/sqlite3.c:172875:10: note: Assuming that condition 'zFilename' is not redundant
  while( ALWAYS(zFilename) && zFilename[0] && (N--)>0 ){
         ^
sqlite3/sqlite3.c:172879:10: note: Null pointer dereference
  return zFilename[0] ? zFilename : 0;
         ^
sqlite3/sqlite3.c:28871:11: error: Overflow in pointer arithmetic, NULL pointer is subtracted. [nullPointerArithmetic]
  assert( EIGHT_BYTE_ALIGNMENT(p) );  /* IMP: R-11148-40995 */
          ^
sqlite3/sqlite3.c:28863:9: note: Assignment 'p=0', assigned value is 0
    p = 0;
        ^
sqlite3/sqlite3.c:28871:11: note: Null pointer subtraction
  assert( EIGHT_BYTE_ALIGNMENT(p) );  /* IMP: R-11148-40995 */
          ^
sqlite3/sqlite3.c:29081:11: warning: Either the condition 'pNew' is redundant or there is overflow in pointer subtraction. [nullPointerArithmeticRedundantCheck]
  assert( EIGHT_BYTE_ALIGNMENT(pNew) ); /* IMP: R-11148-40995 */
          ^
sqlite3/sqlite3.c:29073:9: note: Assuming that condition 'pNew' is not redundant
    if( pNew ){
        ^
sqlite3/sqlite3.c:29081:11: note: Null pointer subtraction
  assert( EIGHT_BYTE_ALIGNMENT(pNew) ); /* IMP: R-11148-40995 */
          ^
sqlite3/sqlite3.c:82047:11: error: Overflow in pointer arithmetic, NULL pointer is subtracted. [nullPointerArithmetic]
  assert( EIGHT_BYTE_ALIGNMENT(pBuf) );
          ^
sqlite3/sqlite3.c:82190:28: note: Calling function 'allocSpace', 2nd argument '0' value is 0
  p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));
                           ^
sqlite3/sqlite3.c:82040:15: note: Assuming condition is Assuming condition is false
    if( nByte <= p->nFree ){
              ^
sqlite3/sqlite3.c:82047:11: note: Null pointer subtraction
  assert( EIGHT_BYTE_ALIGNMENT(pBuf) );
          ^
sqlite3/sqlite3.c:172929:20: warning: Either the condition 'zFilename' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  return zFilename + 1;
                   ^
sqlite3/sqlite3.c:172925:10: note: Assuming that condition 'zFilename' is not redundant
  while( ALWAYS(zFilename) && zFilename[0] ){
         ^
sqlite3/sqlite3.c:172929:20: note: Null pointer addition
  return zFilename + 1;
                   ^
sqlite3/sqlite3.c:106049:51: portability:inconclusive: Casting from double * to unsigned char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    sqlite3VdbeAddOp4Dup8(v, OP_Real, 0, iMem, 0, (u8*)&value, P4_REAL);
                                                  ^
sqlite3/sqlite3.c:33135:34: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    result = sign<0 ? -(double)0 : (double)0;
                                 ^
sqlite3/sqlite3.c:100673:21: style: The comparison 'cnt == 0' is always true. [knownConditionTrueFalse]
  assert( pNC && cnt==0 );
                    ^
sqlite3/sqlite3.c:100622:13: note: 'cnt' is assigned value '0' here.
  int cnt = 0;                      /* Number of matching column names */
            ^
sqlite3/sqlite3.c:100673:21: note: The comparison 'cnt == 0' is always true.
  assert( pNC && cnt==0 );
                    ^
sqlite3/sqlite3.c:137511:18: style: The comparison 'pKeyDup == 0' is always true. [knownConditionTrueFalse]
  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */
                 ^
sqlite3/sqlite3.c:137503:22: note: 'pKeyDup' is assigned value '0' here.
  KeyInfo *pKeyDup = 0; /* Comparison information for duplicate removal */
                     ^
sqlite3/sqlite3.c:137511:18: note: The comparison 'pKeyDup == 0' is always true.
  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */
                 ^
sqlite3/sqlite3.c:165785:23: warning: Redundant assignment of 'yymsp[0].minor.yy528' to itself. [selfAssignment]
{yymsp[0].minor.yy528 = yymsp[0].minor.yy528; /*A-overwrites-X*/}
                      ^
sqlite3/sqlite3.c:167774:15: style: The comparison 'nErr == 0' is always true. [knownConditionTrueFalse]
  assert( nErr==0 );
              ^
sqlite3/sqlite3.c:167667:14: note: 'nErr' is assigned value '0' here.
  int nErr = 0;                   /* Number of errors encountered */
             ^
sqlite3/sqlite3.c:167774:15: note: The comparison 'nErr == 0' is always true.
  assert( nErr==0 );
              ^
sqlite3/sqlite3.c:92068:7: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
      break;
      ^
sqlite3/sqlite3.c:23995:10: style: The scope of the variable 'n' can be reduced. [variableScope]
  int i, n;
         ^
sqlite3/sqlite3.c:30753:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;                             /* Vararg list */
          ^
sqlite3/sqlite3.c:32531:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
sqlite3/sqlite3.c:32904:10: style: The scope of the variable 'x' can be reduced. [variableScope]
  int c, x;
         ^
sqlite3/sqlite3.c:33937:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:34483:15: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
  struct _ht *pEntry;
              ^
sqlite3/sqlite3.c:38675:11: style: The scope of the variable 'nWrite' can be reduced. [variableScope]
      int nWrite = 0;             /* Number of bytes written by seekAndWrite */
          ^
sqlite3/sqlite3.c:41451:13: style: The scope of the variable 'got' can be reduced. [variableScope]
    int fd, got;
            ^
sqlite3/sqlite3.c:50153:18: style: The scope of the variable 'j' can be reduced. [variableScope]
    unsigned int j;
                 ^
sqlite3/sqlite3.c:50154:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
    int rc;
        ^
sqlite3/sqlite3.c:51788:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  unsigned int i;
               ^
sqlite3/sqlite3.c:52064:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
sqlite3/sqlite3.c:54264:19: style: The scope of the variable 'p' can be reduced. [variableScope]
  PagerSavepoint *p;
                  ^
sqlite3/sqlite3.c:54760:17: style: The scope of the variable 'aMagic' can be reduced. [variableScope]
  unsigned char aMagic[8];     /* A buffer to hold the magic header */
                ^
sqlite3/sqlite3.c:56545:7: style: The scope of the variable 'iHdrOff' can be reduced. [variableScope]
  i64 iHdrOff;             /* End of first segment of main-journal records */
      ^
sqlite3/sqlite3.c:61757:7: style: The scope of the variable 'nativeCksum' can be reduced. [variableScope]
  int nativeCksum;                /* True for native byte-order checksums */
      ^
sqlite3/sqlite3.c:64371:7: style: The scope of the variable 'cnt' can be reduced. [variableScope]
  int cnt;
      ^
sqlite3/sqlite3.c:66008:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Btree *p;
         ^
sqlite3/sqlite3.c:66024:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Btree *p;
         ^
sqlite3/sqlite3.c:66773:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:67720:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  int x;                                     /* Excess size of the slot */
      ^
sqlite3/sqlite3.c:67722:7: style: The scope of the variable 'size' can be reduced. [variableScope]
  int size;                                  /* Size of the free slot */
      ^
sqlite3/sqlite3.c:67883:6: style: The scope of the variable 'nFrag' can be reduced. [variableScope]
  u8 nFrag = 0;                         /* Reduction in fragmentation */
     ^
sqlite3/sqlite3.c:68125:7: style: The scope of the variable 'sz' can be reduced. [variableScope]
  int sz;            /* Size of a cell */
      ^
sqlite3/sqlite3.c:68126:7: style: The scope of the variable 'pc' can be reduced. [variableScope]
  int pc;            /* Address of a freeblock within pPage->aData[] */
      ^
sqlite3/sqlite3.c:69941:8: style: The scope of the variable 'nFreeList' can be reduced. [variableScope]
  Pgno nFreeList;           /* Number of pages still on the free-list */
       ^
sqlite3/sqlite3.c:69942:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
sqlite3/sqlite3.c:71495:8: style: The scope of the variable 'pgno' can be reduced. [variableScope]
  Pgno pgno;
       ^
sqlite3/sqlite3.c:71520:8: style: The scope of the variable 'pgno' can be reduced. [variableScope]
  Pgno pgno;
       ^
sqlite3/sqlite3.c:71521:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc = SQLITE_OK;
      ^
sqlite3/sqlite3.c:77622:20: style: The scope of the variable 'pp' can be reduced. [variableScope]
  sqlite3_backup **pp;                 /* Ptr to head of pagers backup list */
                   ^
sqlite3/sqlite3.c:81109:11: style: The scope of the variable 'pOp' can be reduced. [variableScope]
  VdbeOp *pOp;
          ^
sqlite3/sqlite3.c:82700:9: style: The scope of the variable 'rc2' can be reduced. [variableScope]
    int rc2 = SQLITE_OK;
        ^
sqlite3/sqlite3.c:82782:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                         /* Used to store transient return codes */
      ^
sqlite3/sqlite3.c:86485:8: style: The scope of the variable 'pVar' can be reduced. [variableScope]
  Mem *pVar;
       ^
sqlite3/sqlite3.c:87200:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
sqlite3/sqlite3.c:96319:12: style: The scope of the variable 'db' can be reduced. [variableScope]
  sqlite3 *db;
           ^
sqlite3/sqlite3.c:97059:7: style: The scope of the variable 'iBuf' can be reduced. [variableScope]
  int iBuf;
      ^
sqlite3/sqlite3.c:97069:18: style: The scope of the variable 'rc' can be reduced. [variableScope]
      int i = 0, rc;
                 ^
sqlite3/sqlite3.c:97679:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:98252:7: style: The scope of the variable 'bFlush' can be reduced. [variableScope]
  int bFlush;                     /* True to flush contents of memory to PMA */
      ^
sqlite3/sqlite3.c:98996:11: style: The scope of the variable 'iTask' can be reduced. [variableScope]
      int iTask;
          ^
sqlite3/sqlite3.c:100220:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:100221:25: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  struct ExprList_item *pItem;
                        ^
sqlite3/sqlite3.c:100281:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:100282:12: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  SrcItem *pItem;
           ^
sqlite3/sqlite3.c:100318:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
sqlite3/sqlite3.c:101615:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;             /* Loop counter */
      ^
sqlite3/sqlite3.c:101733:13: style: The scope of the variable 'pEList' can be reduced. [variableScope]
  ExprList *pEList;
            ^
sqlite3/sqlite3.c:101759:18: style: The scope of the variable 'pDup' can be reduced. [variableScope]
      Expr *pE, *pDup;
                 ^
sqlite3/sqlite3.c:107074:11: style: The scope of the variable 'nextCase' can be reduced. [variableScope]
      int nextCase;                     /* GOTO label for next WHEN clause */
          ^
sqlite3/sqlite3.c:107826:7: style: The scope of the variable 'iVar' can be reduced. [variableScope]
  int iVar;
      ^
sqlite3/sqlite3.c:107827:18: style: The scope of the variable 'pL' can be reduced. [variableScope]
  sqlite3_value *pL, *pR = 0;
                 ^
sqlite3/sqlite3.c:108550:31: style: The scope of the variable 'pCol' can be reduced. [variableScope]
          struct AggInfo_col *pCol;
                              ^
sqlite3/sqlite3.c:108689:25: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  struct ExprList_item *pItem;
                        ^
sqlite3/sqlite3.c:108690:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:112444:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:113730:7: style: The scope of the variable 'iSrc' can be reduced. [variableScope]
  int iSrc;             /* Index in pTabList->a[] of table being read */
      ^
sqlite3/sqlite3.c:114024:11: style: The scope of the variable 'addrRewind' can be reduced. [variableScope]
      int addrRewind;
          ^
sqlite3/sqlite3.c:114025:11: style: The scope of the variable 'i' can be reduced. [variableScope]
      int i;
          ^
sqlite3/sqlite3.c:114026:11: style: The scope of the variable 'reg' can be reduced. [variableScope]
      int reg;
          ^
sqlite3/sqlite3.c:114505:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:114639:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:118733:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:118734:12: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  SrcItem *pItem;
           ^
sqlite3/sqlite3.c:118924:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:119152:7: style: The scope of the variable 'j' can be reduced. [variableScope]
  int j;
      ^
sqlite3/sqlite3.c:119339:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:119545:12: style: The scope of the variable 'pColl2' can be reduced. [variableScope]
  CollSeq *pColl2;
           ^
sqlite3/sqlite3.c:119898:7: style: The scope of the variable 'h' can be reduced. [variableScope]
  int h;              /* Hash value */
      ^
sqlite3/sqlite3.c:121300:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
sqlite3/sqlite3.c:121486:9: style: The scope of the variable 'z1' can be reduced. [variableScope]
  char *z1;
        ^
sqlite3/sqlite3.c:121488:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
sqlite3/sqlite3.c:121505:9: style: The scope of the variable 'z1' can be reduced. [variableScope]
  char *z1;
        ^
sqlite3/sqlite3.c:121507:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
sqlite3/sqlite3.c:121762:13: style: The scope of the variable 'bMatch' can be reduced. [variableScope]
        int bMatch;
            ^
sqlite3/sqlite3.c:122211:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
sqlite3/sqlite3.c:122358:7: style: The scope of the variable 'flags' can be reduced. [variableScope]
  int flags;                        /* 1: trimleft  2: trimright  3: trim */
      ^
sqlite3/sqlite3.c:122359:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                            /* Loop counter */
      ^
sqlite3/sqlite3.c:123885:15: style: The scope of the variable 'zColl' can be reduced. [variableScope]
  const char *zColl;
              ^
sqlite3/sqlite3.c:123971:14: style: The scope of the variable 'pWInfo' can be reduced. [variableScope]
  WhereInfo *pWInfo;              /* Context used by sqlite3WhereXXX() */
             ^
sqlite3/sqlite3.c:124033:13: style: The scope of the variable 'pEq' can be reduced. [variableScope]
      Expr *pEq, *pAll = 0;
            ^
sqlite3/sqlite3.c:125035:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;
         ^
sqlite3/sqlite3.c:125326:7: style: The scope of the variable 'pDb' can be reduced. [variableScope]
  Db *pDb;                   /* Database only autoinc table */
      ^
sqlite3/sqlite3.c:125327:7: style: The scope of the variable 'memId' can be reduced. [variableScope]
  int memId;                 /* Register holding max rowid */
      ^
sqlite3/sqlite3.c:130678:26: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int upr, lwr, mid = 0, rc;
                         ^
sqlite3/sqlite3.c:130915:13: style: The scope of the variable 'aOp' can be reduced. [variableScope]
    VdbeOp *aOp;
            ^
sqlite3/sqlite3.c:131758:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
sqlite3/sqlite3.c:134384:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Token *p;
         ^
sqlite3/sqlite3.c:134470:7: style: The scope of the variable 'iCol' can be reduced. [variableScope]
  int iCol;            /* Index of column matching zCol */
      ^
sqlite3/sqlite3.c:135641:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:136361:12: style: The scope of the variable 'pColl' can be reduced. [variableScope]
  CollSeq *pColl;
           ^
sqlite3/sqlite3.c:136363:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  Expr *p;
        ^
sqlite3/sqlite3.c:136375:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    i64 n, m;
        ^
sqlite3/sqlite3.c:136375:12: style: The scope of the variable 'm' can be reduced. [variableScope]
    i64 n, m;
           ^
sqlite3/sqlite3.c:136477:9: style: The scope of the variable 'v' can be reduced. [variableScope]
  Vdbe *v = 0;
        ^
sqlite3/sqlite3.c:136478:7: style: The scope of the variable 'iLimit' can be reduced. [variableScope]
  int iLimit = 0;
      ^
sqlite3/sqlite3.c:136479:7: style: The scope of the variable 'iOffset' can be reduced. [variableScope]
  int iOffset;
      ^
sqlite3/sqlite3.c:137473:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;             /* Loop counters */
         ^
sqlite3/sqlite3.c:139834:15: style: The scope of the variable 'iDb' can be reduced. [variableScope]
          int iDb;
              ^
sqlite3/sqlite3.c:142329:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:144792:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                 /* Result code */
      ^
sqlite3/sqlite3.c:144793:7: style: The scope of the variable 'iCursor' can be reduced. [variableScope]
  int iCursor;            /* Cursor used by pTab */
      ^
sqlite3/sqlite3.c:144796:9: style: The scope of the variable 'pTerm' can be reduced. [variableScope]
  Expr *pTerm;            /* One term of the conflict-target clause */
        ^
sqlite3/sqlite3.c:146367:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:147636:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                        /* Loop counter */
      ^
sqlite3/sqlite3.c:148539:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
sqlite3/sqlite3.c:148986:17: style: The scope of the variable 'pOp' can be reduced. [variableScope]
        VdbeOp *pOp;     /* Opcode to access the value of the IN constraint */
                ^
sqlite3/sqlite3.c:149769:13: style: The scope of the variable 'jmp1' can be reduced. [variableScope]
        int jmp1 = 0;                   /* Address of jump operation */
            ^
sqlite3/sqlite3.c:150792:20: style: The scope of the variable 'pAndTerm' can be reduced. [variableScope]
        WhereTerm *pAndTerm;
                   ^
sqlite3/sqlite3.c:150793:13: style: The scope of the variable 'j' can be reduced. [variableScope]
        int j;
            ^
sqlite3/sqlite3.c:151364:18: style: The scope of the variable 'pNewTerm' can be reduced. [variableScope]
      WhereTerm *pNewTerm;
                 ^
sqlite3/sqlite3.c:151553:11: style: The scope of the variable 'idxNew' can be reduced. [variableScope]
      int idxNew;
          ^
sqlite3/sqlite3.c:151554:18: style: The scope of the variable 'pNewTerm' can be reduced. [variableScope]
      WhereTerm *pNewTerm;
                 ^
sqlite3/sqlite3.c:151863:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
sqlite3/sqlite3.c:151907:9: style: The scope of the variable 'pColRef' can be reduced. [variableScope]
  Expr *pColRef;
        ^
sqlite3/sqlite3.c:151908:9: style: The scope of the variable 'pTerm' can be reduced. [variableScope]
  Expr *pTerm;
        ^
sqlite3/sqlite3.c:152060:15: style: The scope of the variable 'pInner' can be reduced. [variableScope]
  WhereLevel *pInner;
              ^
sqlite3/sqlite3.c:152943:7: style: The scope of the variable 'addrTop' can be reduced. [variableScope]
  int addrTop;                         /* Address of OP_Rewind */
      ^
sqlite3/sqlite3.c:152944:7: style: The scope of the variable 'addrCont' can be reduced. [variableScope]
  int addrCont;                        /* Jump here to skip a row */
      ^
sqlite3/sqlite3.c:152946:20: style: The scope of the variable 'pWCEnd' can be reduced. [variableScope]
  const WhereTerm *pWCEnd;             /* Last WHERE clause term */
                   ^
sqlite3/sqlite3.c:152950:7: style: The scope of the variable 'iCur' can be reduced. [variableScope]
  int iCur;                            /* Cursor for table getting the filter */
      ^
sqlite3/sqlite3.c:159968:9: style: The scope of the variable 'addr' can be reduced. [variableScope]
    int addr;
        ^
sqlite3/sqlite3.c:161117:9: style: The scope of the variable 'addr' can be reduced. [variableScope]
    int addr = 0;
        ^
sqlite3/sqlite3.c:193807:13: style: The scope of the variable 'pNode' can be reduced. [variableScope]
  JsonNode *pNode;
            ^
sqlite3/sqlite3.c:194141:13: style: The scope of the variable 'nKey' can be reduced. [variableScope]
  u32 i, j, nKey;
            ^
sqlite3/sqlite3.c:194142:15: style: The scope of the variable 'zKey' can be reduced. [variableScope]
  const char *zKey;
              ^
sqlite3/sqlite3.c:194518:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  u32 i;
      ^
sqlite3/sqlite3.c:194775:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
sqlite3/sqlite3.c:194776:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
sqlite3/sqlite3.c:194954:15: style: The scope of the variable 'zPath' can be reduced. [variableScope]
  const char *zPath;
              ^
sqlite3/sqlite3.c:195105:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
sqlite3/sqlite3.c:195106:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
sqlite3/sqlite3.c:195180:17: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  sqlite3_vtab *pNew;
                ^
sqlite3/sqlite3.c:77945:43: style: Checking if unsigned expression 'acc.mxAlloc' is less than zero. [unsignedLessThanZero]
    assert( acc.zText==zBuf && acc.mxAlloc<=0 );
                                          ^
sqlite3/sqlite3.c:90128:29: style: Unsigned expression 'p2' can't be negative so it is unnecessary to test it. [unsignedPositive]
      assert( pC->nHdrParsed<=p2 );         /* Conditional skipped */
                            ^
sqlite3/sqlite3.c:90090:22: note: Assignment 'pC->nHdrParsed=0', assigned value is 0
    pC->nHdrParsed = 0;
                     ^
sqlite3/sqlite3.c:90128:29: note: Unsigned positive
      assert( pC->nHdrParsed<=p2 );         /* Conditional skipped */
                            ^
sqlite3/sqlite3.c:149245:19: style: Checking if unsigned expression 'pLoop->u.btree.nBtm' is less than zero. [unsignedLessThanZero]
      nExtraReg = MAX(nExtraReg, pLoop->u.btree.nBtm);
                  ^
sqlite3/sqlite3.c:149225:21: note: Assignment 'nExtraReg=0', assigned value is 0
    int nExtraReg = 0;           /* Number of extra registers needed */
                    ^
sqlite3/sqlite3.c:149245:19: note: Unsigned less than zero
      nExtraReg = MAX(nExtraReg, pLoop->u.btree.nBtm);
                  ^
sqlite3/sqlite3.c:194665:18: style: Unsigned expression 'iTarget' can't be negative so it is unnecessary to test it. [unsignedPositive]
  assert( iTarget>=0 && iTarget<pParse->nNode );
                 ^
sqlite3/sqlite3.c:22861:8: style:inconclusive: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'. [funcArgNamesDifferent]
  int *pCurrent,        /* Write current value here */
       ^
sqlite3/sqlite3.c:8622:57: note: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                        ^
sqlite3/sqlite3.c:22861:8: note: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'.
  int *pCurrent,        /* Write current value here */
       ^
sqlite3/sqlite3.c:22862:8: style:inconclusive: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'. [funcArgNamesDifferent]
  int *pHighwater,      /* Write high-water mark here */
       ^
sqlite3/sqlite3.c:8622:68: note: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                                   ^
sqlite3/sqlite3.c:22862:8: note: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'.
  int *pHighwater,      /* Write high-water mark here */
       ^
sqlite3/sqlite3.c:22863:7: style:inconclusive: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'. [funcArgNamesDifferent]
  int resetFlag         /* Reset high-water mark if true */
      ^
sqlite3/sqlite3.c:8622:80: note: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                                               ^
sqlite3/sqlite3.c:22863:7: note: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'.
  int resetFlag         /* Reset high-water mark if true */
      ^
sqlite3/sqlite3.c:24771:54: style:inconclusive: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'. [funcArgNamesDifferent]
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){
                                                     ^
sqlite3/sqlite3.c:7917:54: note: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'.
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);
                                                     ^
sqlite3/sqlite3.c:24771:54: note: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'.
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){
                                                     ^
sqlite3/sqlite3.c:28673:66: style:inconclusive: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){
                                                                 ^
sqlite3/sqlite3.c:6995:66: note: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);
                                                                 ^
sqlite3/sqlite3.c:28673:66: note: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){
                                                                 ^
sqlite3/sqlite3.c:28698:45: style:inconclusive: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_soft_heap_limit(int n){
                                            ^
sqlite3/sqlite3.c:7007:63: note: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit(int N);
                                                              ^
sqlite3/sqlite3.c:28698:45: note: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API void sqlite3_soft_heap_limit(int n){
                                            ^
sqlite3/sqlite3.c:28715:66: style:inconclusive: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){
                                                                 ^
sqlite3/sqlite3.c:6996:66: note: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);
                                                                 ^
sqlite3/sqlite3.c:28715:66: note: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){
                                                                 ^
sqlite3/sqlite3.c:29632:15: style:inconclusive: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'. [funcArgNamesDifferent]
  const char *fmt,           /* Format string */
              ^
sqlite3/sqlite3.c:8447:64: note: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'.
SQLITE_API void sqlite3_str_vappendf(sqlite3_str*, const char *zFormat, va_list);
                                                               ^
sqlite3/sqlite3.c:29632:15: note: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'.
  const char *fmt,           /* Format string */
              ^
sqlite3/sqlite3.c:30432:68: style:inconclusive: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_appendchar(sqlite3_str *p, int N, char c){
                                                                   ^
sqlite3/sqlite3.c:8450:66: note: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'.
SQLITE_API void sqlite3_str_appendchar(sqlite3_str*, int N, char C);
                                                                 ^
sqlite3/sqlite3.c:30432:68: note: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'.
SQLITE_API void sqlite3_str_appendchar(sqlite3_str *p, int N, char c){
                                                                   ^
sqlite3/sqlite3.c:30460:64: style:inconclusive: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_append(sqlite3_str *p, const char *z, int N){
                                                               ^
sqlite3/sqlite3.c:8448:62: note: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_append(sqlite3_str*, const char *zIn, int N);
                                                             ^
sqlite3/sqlite3.c:30460:64: note: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_append(sqlite3_str *p, const char *z, int N){
                                                               ^
sqlite3/sqlite3.c:30477:67: style:inconclusive: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_appendall(sqlite3_str *p, const char *z){
                                                                  ^
sqlite3/sqlite3.c:8449:65: note: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_appendall(sqlite3_str*, const char *zIn);
                                                                ^
sqlite3/sqlite3.c:30477:67: note: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_appendall(sqlite3_str *p, const char *z){
                                                                  ^
sqlite3/sqlite3.c:31654:49: style:inconclusive: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_randomness(int N, void *pBuf){
                                                ^
sqlite3/sqlite3.c:3325:49: note: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'.
SQLITE_API void sqlite3_randomness(int N, void *P);
                                                ^
sqlite3/sqlite3.c:31654:49: note: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'.
SQLITE_API void sqlite3_randomness(int N, void *pBuf){
                                                ^
sqlite3/sqlite3.c:32455:51: style:inconclusive: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){
                                                  ^
sqlite3/sqlite3.c:20057:51: note: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *pData, int nByte);
                                                  ^
sqlite3/sqlite3.c:32455:51: note: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){
                                                  ^
sqlite3/sqlite3.c:32530:52: style:inconclusive: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){
                                                   ^
sqlite3/sqlite3.c:20055:52: note: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *pData, int nChar);
                                                   ^
sqlite3/sqlite3.c:32530:52: note: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){
                                                   ^
sqlite3/sqlite3.c:34533:74: style:inconclusive: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'. [funcArgNamesDifferent]
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){
                                                                         ^
sqlite3/sqlite3.c:13790:71: note: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'.
SQLITE_PRIVATE void *sqlite3HashInsert(Hash*, const char *pKey, void *pData);
                                                                      ^
sqlite3/sqlite3.c:34533:74: note: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'.
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){
                                                                         ^
sqlite3/sqlite3.c:49547:73: style:inconclusive: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'. [funcArgNamesDifferent]
static int memdbUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
                                                                        ^
sqlite3/sqlite3.c:49178:67: note: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'.
static int memdbUnfetch(sqlite3_file*, sqlite3_int64 iOfst, void *p);
                                                                  ^
sqlite3/sqlite3.c:49547:73: note: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'.
static int memdbUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
                                                                        ^
sqlite3/sqlite3.c:49659:15: style:inconclusive: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'. [funcArgNamesDifferent]
  const char *zPath,
              ^
sqlite3/sqlite3.c:49185:50: note: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'.
static int memdbAccess(sqlite3_vfs*, const char *zName, int flags, int *);
                                                 ^
sqlite3/sqlite3.c:49659:15: note: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'.
  const char *zPath,
              ^
sqlite3/sqlite3.c:49677:15: style:inconclusive: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'. [funcArgNamesDifferent]
  const char *zPath,
              ^
sqlite3/sqlite3.c:49186:56: note: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'.
static int memdbFullPathname(sqlite3_vfs*, const char *zName, int, char *zOut);
                                                       ^
sqlite3/sqlite3.c:49677:15: note: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'.
  const char *zPath,
              ^
sqlite3/sqlite3.c:49689:57: style:inconclusive: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'. [funcArgNamesDifferent]
static void *memdbDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                                        ^
sqlite3/sqlite3.c:49187:52: note: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'.
static void *memdbDlOpen(sqlite3_vfs*, const char *zFilename);
                                                   ^
sqlite3/sqlite3.c:49689:57: note: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'.
static void *memdbDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                                        ^
sqlite3/sqlite3.c:49720:64: style:inconclusive: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'. [funcArgNamesDifferent]
static int memdbRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){
                                                               ^
sqlite3/sqlite3.c:49191:59: note: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'.
static int memdbRandomness(sqlite3_vfs*, int nByte, char *zOut);
                                                          ^
sqlite3/sqlite3.c:49720:64: note: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'.
static int memdbRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){
                                                               ^
sqlite3/sqlite3.c:49728:46: style:inconclusive: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'. [funcArgNamesDifferent]
static int memdbSleep(sqlite3_vfs *pVfs, int nMicro){
                                             ^
sqlite3/sqlite3.c:49192:41: note: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'.
static int memdbSleep(sqlite3_vfs*, int microseconds);
                                        ^
sqlite3/sqlite3.c:49728:46: note: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'.
static int memdbSleep(sqlite3_vfs *pVfs, int nMicro){
                                             ^
sqlite3/sqlite3.c:50658:11: style:inconclusive: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'. [funcArgNamesDifferent]
  PCache *p                    /* Preallocated space for the PCache */
          ^
sqlite3/sqlite3.c:16048:11: note: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'.
  PCache *pToInit                /* Preallocated space for the PCache */
          ^
sqlite3/sqlite3.c:50658:11: note: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'.
  PCache *p                    /* Preallocated space for the PCache */
          ^
sqlite3/sqlite3.c:51001:64: style:inconclusive: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){
                                                               ^
sqlite3/sqlite3.c:16077:57: note: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'.
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache*, Pgno x);
                                                        ^
sqlite3/sqlite3.c:51001:64: note: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'.
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){
                                                               ^
sqlite3/sqlite3.c:58862:7: style:inconclusive: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'. [funcArgNamesDifferent]
  int flags           /* PAGER_GET_XXX flags */
      ^
sqlite3/sqlite3.c:14814:83: note: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'.
SQLITE_PRIVATE int sqlite3PagerGet(Pager *pPager, Pgno pgno, DbPage **ppPage, int clrFlag);
                                                                                  ^
sqlite3/sqlite3.c:58862:7: note: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'.
  int flags           /* PAGER_GET_XXX flags */
      ^
sqlite3/sqlite3.c:60074:65: style:inconclusive: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){
                                                                ^
sqlite3/sqlite3.c:14837:65: note: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'.
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int n);
                                                                ^
sqlite3/sqlite3.c:60074:65: note: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'.
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){
                                                                ^
sqlite3/sqlite3.c:60731:8: style:inconclusive: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'. [funcArgNamesDifferent]
  int *pbOpen                     /* OUT: Set to true if call is a no-op */
       ^
sqlite3/sqlite3.c:14845:62: note: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'.
SQLITE_PRIVATE   int sqlite3PagerOpenWal(Pager *pPager, int *pisOpen);
                                                             ^
sqlite3/sqlite3.c:60731:8: note: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'.
  int *pbOpen                     /* OUT: Set to true if call is a no-op */
       ^
sqlite3/sqlite3.c:69040:58: style:inconclusive: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                         ^
sqlite3/sqlite3.c:14987:58: note: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);
                                                         ^
sqlite3/sqlite3.c:69040:58: note: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                         ^
sqlite3/sqlite3.c:69040:86: style:inconclusive: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                                                     ^
sqlite3/sqlite3.c:14987:87: note: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);
                                                                                      ^
sqlite3/sqlite3.c:69040:86: note: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                                                     ^
sqlite3/sqlite3.c:70671:13: style:inconclusive: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'. [funcArgNamesDifferent]
  BtCursor *pCur                              /* Write new cursor here */
            ^
sqlite3/sqlite3.c:15154:13: note: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'.
  BtCursor *pCursor                    /* Space to write cursor structure */
            ^
sqlite3/sqlite3.c:70671:13: note: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'.
  BtCursor *pCur                              /* Write new cursor here */
            ^
sqlite3/sqlite3.c:71632:7: style:inconclusive: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'. [funcArgNamesDifferent]
  int biasRight,           /* If true, bias the search to the high end */
      ^
sqlite3/sqlite3.c:15168:7: note: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'.
  int bias,
      ^
sqlite3/sqlite3.c:71632:7: note: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'.
  int biasRight,           /* If true, bias the search to the high end */
      ^
sqlite3/sqlite3.c:71799:19: style:inconclusive: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'. [funcArgNamesDifferent]
  UnpackedRecord *pIdxKey, /* Unpacked index key */
                  ^
sqlite3/sqlite3.c:15173:19: note: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'.
  UnpackedRecord *pUnKey,
                  ^
sqlite3/sqlite3.c:71799:19: note: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'.
  UnpackedRecord *pIdxKey, /* Unpacked index key */
                  ^
sqlite3/sqlite3.c:74964:23: style:inconclusive: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'. [funcArgNamesDifferent]
  const BtreePayload *pX,        /* Content of the row to be inserted */
                      ^
sqlite3/sqlite3.c:15229:70: note: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'.
SQLITE_PRIVATE int sqlite3BtreeInsert(BtCursor*, const BtreePayload *pPayload,
                                                                     ^
sqlite3/sqlite3.c:74964:23: note: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'.
  const BtreePayload *pX,        /* Content of the row to be inserted */
                      ^
sqlite3/sqlite3.c:75966:48: style:inconclusive: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                               ^
sqlite3/sqlite3.c:15045:48: note: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *pBtree, int idx, u32 *pValue);
                                               ^
sqlite3/sqlite3.c:75966:48: note: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                               ^
sqlite3/sqlite3.c:75966:65: style:inconclusive: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                                                ^
sqlite3/sqlite3.c:15045:70: note: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *pBtree, int idx, u32 *pValue);
                                                                     ^
sqlite3/sqlite3.c:75966:65: note: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                                                ^
sqlite3/sqlite3.c:75996:66: style:inconclusive: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){
                                                                 ^
sqlite3/sqlite3.c:15046:64: note: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'.
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree*, int idx, u32 value);
                                                               ^
sqlite3/sqlite3.c:75996:66: note: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'.
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){
                                                                 ^
sqlite3/sqlite3.c:76870:52: style:inconclusive: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){
                                                   ^
sqlite3/sqlite3.c:15007:52: note: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *pBtree);
                                                   ^
sqlite3/sqlite3.c:76870:52: note: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){
                                                   ^
sqlite3/sqlite3.c:76887:49: style:inconclusive: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){
                                                ^
sqlite3/sqlite3.c:15009:49: note: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *pBtree, int iTab, u8 isWriteLock);
                                                ^
sqlite3/sqlite3.c:76887:49: note: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){
                                                ^
sqlite3/sqlite3.c:76976:50: style:inconclusive: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){
                                                 ^
sqlite3/sqlite3.c:15257:50: note: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'.
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBt, int iVersion);
                                                 ^
sqlite3/sqlite3.c:76976:50: note: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'.
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){
                                                 ^
sqlite3/sqlite3.c:77018:50: style:inconclusive: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){
                                                 ^
sqlite3/sqlite3.c:15259:50: note: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *pBt);
                                                 ^
sqlite3/sqlite3.c:77018:50: note: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){
                                                 ^
sqlite3/sqlite3.c:77188:12: style:inconclusive: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'. [funcArgNamesDifferent]
  sqlite3* pDestDb,                     /* Database to write to */
           ^
sqlite3/sqlite3.c:9278:12: note: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'.
  sqlite3 *pDest,                        /* Destination database handle */
           ^
sqlite3/sqlite3.c:77188:12: note: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'.
  sqlite3* pDestDb,                     /* Database to write to */
           ^
sqlite3/sqlite3.c:77189:15: style:inconclusive: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'. [funcArgNamesDifferent]
  const char *zDestDb,                  /* Name of database within pDestDb */
              ^
sqlite3/sqlite3.c:9279:15: note: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'.
  const char *zDestName,                 /* Destination database name */
              ^
sqlite3/sqlite3.c:77189:15: note: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'.
  const char *zDestDb,                  /* Name of database within pDestDb */
              ^
sqlite3/sqlite3.c:77190:12: style:inconclusive: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'. [funcArgNamesDifferent]
  sqlite3* pSrcDb,                      /* Database connection to read from */
           ^
sqlite3/sqlite3.c:9280:12: note: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'.
  sqlite3 *pSource,                      /* Source database handle */
           ^
sqlite3/sqlite3.c:77190:12: note: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'.
  sqlite3* pSrcDb,                      /* Database connection to read from */
           ^
sqlite3/sqlite3.c:77191:15: style:inconclusive: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'. [funcArgNamesDifferent]
  const char *zSrcDb                    /* Name of database within pSrcDb */
              ^
sqlite3/sqlite3.c:9281:15: note: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'.
  const char *zSourceName                /* Source database name */
              ^
sqlite3/sqlite3.c:77191:15: note: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'.
  const char *zSrcDb                    /* Name of database within pSrcDb */
              ^
sqlite3/sqlite3.c:78054:77: style:inconclusive: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'. [funcArgNamesDifferent]
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){
                                                                            ^
sqlite3/sqlite3.c:22598:61: note: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'.
SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve);
                                                            ^
sqlite3/sqlite3.c:78054:77: note: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'.
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){
                                                                            ^
sqlite3/sqlite3.c:78117:64: style:inconclusive: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){
                                                               ^
sqlite3/sqlite3.c:22599:64: note: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'.
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int n);
                                                               ^
sqlite3/sqlite3.c:78117:64: note: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'.
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){
                                                               ^
sqlite3/sqlite3.c:80816:64: style:inconclusive: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){
                                                               ^
sqlite3/sqlite3.c:15795:62: note: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe*, int addr, int P1);
                                                             ^
sqlite3/sqlite3.c:80816:64: note: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){
                                                               ^
sqlite3/sqlite3.c:80819:64: style:inconclusive: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){
                                                               ^
sqlite3/sqlite3.c:15796:62: note: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe*, int addr, int P2);
                                                             ^
sqlite3/sqlite3.c:80819:64: note: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){
                                                               ^
sqlite3/sqlite3.c:80822:64: style:inconclusive: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){
                                                               ^
sqlite3/sqlite3.c:15797:62: note: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe*, int addr, int P3);
                                                             ^
sqlite3/sqlite3.c:80822:64: note: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){
                                                               ^
sqlite3/sqlite3.c:80825:54: style:inconclusive: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){
                                                     ^
sqlite3/sqlite3.c:15798:52: note: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'.
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe*, u16 P5);
                                                   ^
sqlite3/sqlite3.c:80825:54: note: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'.
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){
                                                     ^
sqlite3/sqlite3.c:81065:81: style:inconclusive: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){
                                                                                ^
sqlite3/sqlite3.c:15808:79: note: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe*, int addr, const char *zP4, int N);
                                                                              ^
sqlite3/sqlite3.c:81065:81: note: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){
                                                                                ^
sqlite3/sqlite3.c:81108:65: style:inconclusive: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){
                                                                ^
sqlite3/sqlite3.c:15809:63: note: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe*, void *pP4, int p4type);
                                                              ^
sqlite3/sqlite3.c:81108:65: note: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){
                                                                ^
sqlite3/sqlite3.c:85517:17: style:inconclusive: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'. [funcArgNamesDifferent]
  unsigned char enc
                ^
sqlite3/sqlite3.c:6218:58: note: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'.
                           void(*)(void*), unsigned char encoding);
                                                         ^
sqlite3/sqlite3.c:85517:17: note: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'.
  unsigned char enc
                ^
sqlite3/sqlite3.c:85989:68: style:inconclusive: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'. [funcArgNamesDifferent]
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){
                                                                   ^
sqlite3/sqlite3.c:5950:66: note: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'.
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);
                                                                 ^
sqlite3/sqlite3.c:85989:68: note: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'.
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){
                                                                   ^
sqlite3/sqlite3.c:86010:65: style:inconclusive: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'. [funcArgNamesDifferent]
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){
                                                                ^
sqlite3/sqlite3.c:6036:60: note: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);
                                                           ^
sqlite3/sqlite3.c:86010:65: note: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){
                                                                ^
sqlite3/sqlite3.c:86040:7: style:inconclusive: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'. [funcArgNamesDifferent]
  int iArg,
      ^
sqlite3/sqlite3.c:6037:59: note: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));
                                                          ^
sqlite3/sqlite3.c:86040:7: note: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
  int iArg,
      ^
sqlite3/sqlite3.c:86213:69: style:inconclusive: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){
                                                                    ^
sqlite3/sqlite3.c:5398:63: note: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);
                                                              ^
sqlite3/sqlite3.c:86213:69: note: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){
                                                                    ^
sqlite3/sqlite3.c:86223:62: style:inconclusive: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){
                                                             ^
sqlite3/sqlite3.c:5405:56: note: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt*, int iCol);
                                                       ^
sqlite3/sqlite3.c:86223:62: note: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){
                                                             ^
sqlite3/sqlite3.c:86228:64: style:inconclusive: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){
                                                               ^
sqlite3/sqlite3.c:5406:58: note: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);
                                                         ^
sqlite3/sqlite3.c:86228:64: note: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){
                                                               ^
sqlite3/sqlite3.c:86233:66: style:inconclusive: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){
                                                                 ^
sqlite3/sqlite3.c:5399:60: note: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API double sqlite3_column_double(sqlite3_stmt*, int iCol);
                                                           ^
sqlite3/sqlite3.c:86233:66: note: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){
                                                                 ^
sqlite3/sqlite3.c:86238:60: style:inconclusive: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){
                                                           ^
sqlite3/sqlite3.c:5400:54: note: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_int(sqlite3_stmt*, int iCol);
                                                     ^
sqlite3/sqlite3.c:86238:60: note: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){
                                                           ^
sqlite3/sqlite3.c:86243:71: style:inconclusive: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){
                                                                      ^
sqlite3/sqlite3.c:5401:66: note: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);
                                                                 ^
sqlite3/sqlite3.c:86243:71: note: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){
                                                                      ^
sqlite3/sqlite3.c:86248:78: style:inconclusive: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){
                                                                             ^
sqlite3/sqlite3.c:5402:72: note: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);
                                                                       ^
sqlite3/sqlite3.c:86248:78: note: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){
                                                                             ^
sqlite3/sqlite3.c:86253:73: style:inconclusive: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){
                                                                        ^
sqlite3/sqlite3.c:5404:67: note: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);
                                                                  ^
sqlite3/sqlite3.c:86253:73: note: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){
                                                                        ^
sqlite3/sqlite3.c:86263:71: style:inconclusive: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){
                                                                      ^
sqlite3/sqlite3.c:5403:65: note: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);
                                                                ^
sqlite3/sqlite3.c:86263:71: note: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){
                                                                      ^
sqlite3/sqlite3.c:86269:61: style:inconclusive: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){
                                                            ^
sqlite3/sqlite3.c:5407:55: note: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_type(sqlite3_stmt*, int iCol);
                                                      ^
sqlite3/sqlite3.c:86269:61: note: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){
                                                            ^
sqlite3/sqlite3.c:86516:7: style:inconclusive: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'. [funcArgNamesDifferent]
  int nData,
      ^
sqlite3/sqlite3.c:4831:71: note: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'.
SQLITE_API int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));
                                                                      ^
sqlite3/sqlite3.c:86516:7: note: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'.
  int nData,
      ^
sqlite3/sqlite3.c:86599:17: style:inconclusive: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'. [funcArgNamesDifferent]
  unsigned char enc
                ^
sqlite3/sqlite3.c:4841:56: note: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'.
                         void(*)(void*), unsigned char encoding);
                                                       ^
sqlite3/sqlite3.c:86599:17: note: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'.
  unsigned char enc
                ^
sqlite3/sqlite3.c:86822:69: style:inconclusive: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){
                                                                    ^
sqlite3/sqlite3.c:8775:62: note: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);
                                                             ^
sqlite3/sqlite3.c:86822:69: note: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){
                                                                    ^
sqlite3/sqlite3.c:96087:7: style:inconclusive: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'. [funcArgNamesDifferent]
  int wrFlag,             /* True -> read/write access, false -> read-only */
      ^
sqlite3/sqlite3.c:7749:7: note: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'.
  int flags,
      ^
sqlite3/sqlite3.c:96087:7: note: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'.
  int wrFlag,             /* True -> read/write access, false -> read-only */
      ^
sqlite3/sqlite3.c:96412:61: style:inconclusive: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                            ^
sqlite3/sqlite3.c:7844:56: note: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
                                                       ^
sqlite3/sqlite3.c:96412:61: note: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                            ^
sqlite3/sqlite3.c:96412:68: style:inconclusive: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                                   ^
sqlite3/sqlite3.c:7844:63: note: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
                                                              ^
sqlite3/sqlite3.c:96412:68: note: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                                   ^
sqlite3/sqlite3.c:106257:56: style:inconclusive: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'. [funcArgNamesDifferent]
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){
                                                       ^
sqlite3/sqlite3.c:102453:56: note: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'.
static int exprCodeVector(Parse *pParse, Expr *p, int *piToFree);
                                                       ^
sqlite3/sqlite3.c:106257:56: note: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'.
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){
                                                       ^
sqlite3/sqlite3.c:112908:57: style:inconclusive: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){
                                                        ^
sqlite3/sqlite3.c:20221:53: note: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'.
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3*,int iDB);
                                                    ^
sqlite3/sqlite3.c:112908:57: note: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'.
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){
                                                        ^
sqlite3/sqlite3.c:113655:9: style:inconclusive: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'. [funcArgNamesDifferent]
  void *pArg
        ^
sqlite3/sqlite3.c:3419:9: note: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'.
  void *pUserData
        ^
sqlite3/sqlite3.c:113655:9: note: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'.
  void *pArg
        ^
sqlite3/sqlite3.c:121842:44: style:inconclusive: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                           ^
sqlite3/sqlite3.c:9436:44: note: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'.
SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);
                                           ^
sqlite3/sqlite3.c:121842:44: note: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'.
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                           ^
sqlite3/sqlite3.c:121842:70: style:inconclusive: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                                                     ^
sqlite3/sqlite3.c:9436:63: note: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'.
SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);
                                                              ^
sqlite3/sqlite3.c:121842:70: note: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'.
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                                                     ^
sqlite3/sqlite3.c:121850:44: style:inconclusive: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                           ^
sqlite3/sqlite3.c:9459:44: note: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'.
SQLITE_API int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc);
                                           ^
sqlite3/sqlite3.c:121850:44: note: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'.
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                           ^
sqlite3/sqlite3.c:121850:85: style:inconclusive: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                                                                    ^
sqlite3/sqlite3.c:9459:82: note: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'.
SQLITE_API int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc);
                                                                                 ^
sqlite3/sqlite3.c:121850:85: note: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'.
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                                                                    ^
sqlite3/sqlite3.c:128046:15: style:inconclusive: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
  const char *zSql,           /* The SQL to be executed */
              ^
sqlite3/sqlite3.c:733:15: note: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'.
  const char *sql,                           /* SQL to be evaluated */
              ^
sqlite3/sqlite3.c:128046:15: note: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'.
  const char *zSql,           /* The SQL to be executed */
              ^
sqlite3/sqlite3.c:128049:10: style:inconclusive: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'. [funcArgNamesDifferent]
  char **pzErrMsg             /* Write error messages here */
         ^
sqlite3/sqlite3.c:736:10: note: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'.
  char **errmsg                              /* Error msg written here */
         ^
sqlite3/sqlite3.c:128049:10: note: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'.
  char **pzErrMsg             /* Write error messages here */
         ^
sqlite3/sqlite3.c:134017:7: style:inconclusive: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:4462:7: note: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134017:7: note: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134029:7: style:inconclusive: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:4469:7: note: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134029:7: note: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134047:7: style:inconclusive: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:4476:7: note: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134047:7: note: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134133:7: style:inconclusive: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:4484:7: note: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134133:7: note: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134145:7: style:inconclusive: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:4491:7: note: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134145:7: note: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134157:7: style:inconclusive: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:4498:7: note: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:134157:7: note: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
sqlite3/sqlite3.c:141847:10: style:inconclusive: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'. [funcArgNamesDifferent]
  char **pzErrMsg             /* Write error messages here */
         ^
sqlite3/sqlite3.c:3147:10: note: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'.
  char **pzErrmsg       /* Error msg written here */
         ^
sqlite3/sqlite3.c:141847:10: note: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'.
  char **pzErrMsg             /* Write error messages here */
         ^
sqlite3/sqlite3.c:141911:10: style:inconclusive: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'. [funcArgNamesDifferent]
  char **azResult            /* Result returned from sqlite3_get_table() */
         ^
sqlite3/sqlite3.c:3149:43: note: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'.
SQLITE_API void sqlite3_free_table(char **result);
                                          ^
sqlite3/sqlite3.c:141911:10: note: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'.
  char **azResult            /* Result returned from sqlite3_get_table() */
         ^
sqlite3/sqlite3.c:144534:9: style:inconclusive: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'. [funcArgNamesDifferent]
  Expr *pRowid,        /* Expression used to recompute the rowid */
        ^
sqlite3/sqlite3.c:143380:9: note: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'.
  Expr *pRowidExpr,    /* Expression used to recompute the rowid */
        ^
sqlite3/sqlite3.c:144534:9: note: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'.
  Expr *pRowid,        /* Expression used to recompute the rowid */
        ^
sqlite3/sqlite3.c:145534:25: style:inconclusive: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'. [funcArgNamesDifferent]
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
sqlite3/sqlite3.c:7532:25: note: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *p,   /* Methods for the module */
                        ^
sqlite3/sqlite3.c:145534:25: note: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
sqlite3/sqlite3.c:145535:9: style:inconclusive: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'. [funcArgNamesDifferent]
  void *pAux                      /* Context pointer for xCreate/xConnect */
        ^
sqlite3/sqlite3.c:7533:9: note: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pClientData          /* Client data for xCreate/xConnect */
        ^
sqlite3/sqlite3.c:145535:9: note: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pAux                      /* Context pointer for xCreate/xConnect */
        ^
sqlite3/sqlite3.c:145549:25: style:inconclusive: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'. [funcArgNamesDifferent]
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
sqlite3/sqlite3.c:7538:25: note: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *p,   /* Methods for the module */
                        ^
sqlite3/sqlite3.c:145549:25: note: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
sqlite3/sqlite3.c:145550:9: style:inconclusive: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'. [funcArgNamesDifferent]
  void *pAux,                     /* Context pointer for xCreate/xConnect */
        ^
sqlite3/sqlite3.c:7539:9: note: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pClientData,         /* Client data for xCreate/xConnect */
        ^
sqlite3/sqlite3.c:145550:9: note: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pAux,                     /* Context pointer for xCreate/xConnect */
        ^
sqlite3/sqlite3.c:145563:63: style:inconclusive: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_drop_modules(sqlite3 *db, const char** azNames){
                                                              ^
sqlite3/sqlite3.c:7557:16: note: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'.
  const char **azKeep         /* Except, do not remove the ones named here */
               ^
sqlite3/sqlite3.c:145563:63: note: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'.
SQLITE_API int sqlite3_drop_modules(sqlite3 *db, const char** azNames){
                                                              ^
sqlite3/sqlite3.c:146229:62: style:inconclusive: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){
                                                             ^
sqlite3/sqlite3.c:7615:59: note: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'.
SQLITE_API int sqlite3_declare_vtab(sqlite3*, const char *zSQL);
                                                          ^
sqlite3/sqlite3.c:146229:62: note: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'.
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){
                                                             ^
sqlite3/sqlite3.c:168058:45: style:inconclusive: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_complete(const char *zSql){
                                            ^
sqlite3/sqlite3.c:2981:45: note: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete(const char *sql);
                                            ^
sqlite3/sqlite3.c:168058:45: note: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete(const char *zSql){
                                            ^
sqlite3/sqlite3.c:168223:47: style:inconclusive: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_complete16(const void *zSql){
                                              ^
sqlite3/sqlite3.c:2982:47: note: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete16(const void *sql);
                                              ^
sqlite3/sqlite3.c:168223:47: note: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete16(const void *zSql){
                                              ^
sqlite3/sqlite3.c:170338:15: style:inconclusive: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
sqlite3/sqlite3.c:5589:15: note: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
sqlite3/sqlite3.c:170338:15: note: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
sqlite3/sqlite3.c:170340:7: style:inconclusive: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
sqlite3/sqlite3.c:5591:7: note: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
sqlite3/sqlite3.c:170340:7: note: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
sqlite3/sqlite3.c:170341:9: style:inconclusive: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
sqlite3/sqlite3.c:5592:9: note: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
sqlite3/sqlite3.c:170341:9: note: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
sqlite3/sqlite3.c:170351:15: style:inconclusive: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
sqlite3/sqlite3.c:5609:15: note: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
sqlite3/sqlite3.c:170351:15: note: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
sqlite3/sqlite3.c:170353:7: style:inconclusive: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
sqlite3/sqlite3.c:5611:7: note: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
sqlite3/sqlite3.c:170353:7: note: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
sqlite3/sqlite3.c:170354:9: style:inconclusive: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
sqlite3/sqlite3.c:5612:9: note: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
sqlite3/sqlite3.c:170354:9: note: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
sqlite3/sqlite3.c:170365:15: style:inconclusive: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
sqlite3/sqlite3.c:5620:15: note: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
sqlite3/sqlite3.c:170365:15: note: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
sqlite3/sqlite3.c:170367:7: style:inconclusive: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
sqlite3/sqlite3.c:5622:7: note: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
sqlite3/sqlite3.c:170367:7: note: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
sqlite3/sqlite3.c:170368:9: style:inconclusive: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
sqlite3/sqlite3.c:5623:9: note: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
sqlite3/sqlite3.c:170368:9: note: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
sqlite3/sqlite3.c:170385:9: style:inconclusive: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
sqlite3/sqlite3.c:5602:9: note: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
sqlite3/sqlite3.c:170385:9: note: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
sqlite3/sqlite3.c:170444:15: style:inconclusive: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'. [funcArgNamesDifferent]
  const char *zName,
              ^
sqlite3/sqlite3.c:7634:64: note: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'.
SQLITE_API int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);
                                                               ^
sqlite3/sqlite3.c:170444:15: note: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'.
  const char *zName,
              ^
sqlite3/sqlite3.c:170498:12: style:inconclusive: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'. [funcArgNamesDifferent]
  unsigned mTrace,                           /* Mask of events to be traced */
           ^
sqlite3/sqlite3.c:3617:12: note: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'.
  unsigned uMask,
           ^
sqlite3/sqlite3.c:170498:12: note: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'.
  unsigned mTrace,                           /* Mask of events to be traced */
           ^
sqlite3/sqlite3.c:170500:9: style:inconclusive: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'. [funcArgNamesDifferent]
  void *pArg                                 /* Context */
        ^
sqlite3/sqlite3.c:3619:9: note: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'.
  void *pCtx
        ^
sqlite3/sqlite3.c:170500:9: note: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'.
  void *pArg                                 /* Context */
        ^
sqlite3/sqlite3.c:170709:60: style:inconclusive: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){
                                                           ^
sqlite3/sqlite3.c:9554:60: note: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'.
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);
                                                           ^
sqlite3/sqlite3.c:170709:60: note: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'.
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){
                                                           ^
sqlite3/sqlite3.c:171173:47: style:inconclusive: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                              ^
sqlite3/sqlite3.c:4249:44: note: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'.
SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);
                                           ^
sqlite3/sqlite3.c:171173:47: note: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'.
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                              ^
sqlite3/sqlite3.c:171173:60: style:inconclusive: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                                           ^
sqlite3/sqlite3.c:4249:52: note: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'.
SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);
                                                   ^
sqlite3/sqlite3.c:171173:60: note: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'.
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                                           ^
sqlite3/sqlite3.c:171836:15: style:inconclusive: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'. [funcArgNamesDifferent]
  const char *zFilename,
              ^
sqlite3/sqlite3.c:3927:15: note: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const char *filename,   /* Database filename (UTF-8) */
              ^
sqlite3/sqlite3.c:171836:15: note: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const char *zFilename,
              ^
sqlite3/sqlite3.c:171856:15: style:inconclusive: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'. [funcArgNamesDifferent]
  const void *zFilename,
              ^
sqlite3/sqlite3.c:3931:15: note: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const void *filename,   /* Database filename (UTF-16) */
              ^
sqlite3/sqlite3.c:171856:15: note: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const void *zFilename,
              ^
sqlite3/sqlite3.c:171897:7: style:inconclusive: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
sqlite3/sqlite3.c:6326:7: note: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
sqlite3/sqlite3.c:171897:7: note: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
sqlite3/sqlite3.c:171898:9: style:inconclusive: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
sqlite3/sqlite3.c:6327:9: note: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
sqlite3/sqlite3.c:171898:9: note: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
sqlite3/sqlite3.c:171910:7: style:inconclusive: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
sqlite3/sqlite3.c:6333:7: note: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
sqlite3/sqlite3.c:171910:7: note: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
sqlite3/sqlite3.c:171911:9: style:inconclusive: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
sqlite3/sqlite3.c:6334:9: note: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
sqlite3/sqlite3.c:171911:9: note: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
sqlite3/sqlite3.c:171935:7: style:inconclusive: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
sqlite3/sqlite3.c:6341:7: note: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
sqlite3/sqlite3.c:171935:7: note: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
sqlite3/sqlite3.c:171936:9: style:inconclusive: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
sqlite3/sqlite3.c:6342:9: note: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
sqlite3/sqlite3.c:171936:9: note: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
sqlite3/sqlite3.c:172885:48: style:inconclusive: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'zFile' definition 'zFilename'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                               ^
sqlite3/sqlite3.c:4008:48: note: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'zFile' definition 'zFilename'.
SQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);
                                               ^
sqlite3/sqlite3.c:172885:48: note: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'zFile' definition 'zFilename'.
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                               ^
sqlite3/sqlite3.c:172885:83: style:inconclusive: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                                                                  ^
sqlite3/sqlite3.c:4008:79: note: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'.
SQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);
                                                                              ^
sqlite3/sqlite3.c:172885:83: note: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'.
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                                                                  ^
sqlite3/sqlite3.c:116045:10: warning: Size of pointer 'zExtra' used instead of size of its data. [pointerSize]
  memcpy(zExtra, pIdx->azColl, sizeof(char*)*pIdx->nColumn);
         ^
sqlite3/sqlite3.c:157322:16: warning: Expression 'nTabList-1' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation. [signConversionCond]
  nByteWInfo = ROUND8(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
               ^
sqlite3/sqlite3.c:157369:15: note: Assuming that condition 'nTabList==0' is not redundant
  if( nTabList==0 ){
              ^
sqlite3/sqlite3.c:157322:16: note: Negative value is converted to an unsigned value
  nByteWInfo = ROUND8(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
               ^
sqlite3/sqlite3.c:10743:9: style: struct member 'sqlite3_rtree_geometry::pContext' is never used. [unusedStructMember]
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */
        ^
sqlite3/sqlite3.c:10745:22: style: struct member 'sqlite3_rtree_geometry::aParam' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */
                     ^
sqlite3/sqlite3.c:10747:10: style: struct member 'sqlite3_rtree_geometry::xDelUser' is never used. [unusedStructMember]
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */
         ^
sqlite3/sqlite3.c:10775:9: style: struct member 'sqlite3_rtree_query_info::pContext' is never used. [unusedStructMember]
  void *pContext;                   /* pContext from when function registered */
        ^
sqlite3/sqlite3.c:10777:22: style: struct member 'sqlite3_rtree_query_info::aParam' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */
                     ^
sqlite3/sqlite3.c:10779:10: style: struct member 'sqlite3_rtree_query_info::xDelUser' is never used. [unusedStructMember]
  void (*xDelUser)(void*);          /* function to free pUser */
         ^
sqlite3/sqlite3.c:10780:22: style: struct member 'sqlite3_rtree_query_info::aCoord' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */
                     ^
sqlite3/sqlite3.c:10781:17: style: struct member 'sqlite3_rtree_query_info::anQueue' is never used. [unusedStructMember]
  unsigned int *anQueue;            /* Number of pending entries in the queue */
                ^
sqlite3/sqlite3.c:10782:7: style: struct member 'sqlite3_rtree_query_info::nCoord' is never used. [unusedStructMember]
  int nCoord;                       /* Number of coordinates */
      ^
sqlite3/sqlite3.c:10783:7: style: struct member 'sqlite3_rtree_query_info::iLevel' is never used. [unusedStructMember]
  int iLevel;                       /* Level of current node or entry */
      ^
sqlite3/sqlite3.c:10784:7: style: struct member 'sqlite3_rtree_query_info::mxLevel' is never used. [unusedStructMember]
  int mxLevel;                      /* The largest iLevel value in the tree */
      ^
sqlite3/sqlite3.c:10786:21: style: struct member 'sqlite3_rtree_query_info::rParentScore' is never used. [unusedStructMember]
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */
                    ^
sqlite3/sqlite3.c:10787:7: style: struct member 'sqlite3_rtree_query_info::eParentWithin' is never used. [unusedStructMember]
  int eParentWithin;                /* Visibility of parent node */
      ^
sqlite3/sqlite3.c:10788:7: style: struct member 'sqlite3_rtree_query_info::eWithin' is never used. [unusedStructMember]
  int eWithin;                      /* OUT: Visibility */
      ^
sqlite3/sqlite3.c:10789:21: style: struct member 'sqlite3_rtree_query_info::rScore' is never used. [unusedStructMember]
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */
                    ^
sqlite3/sqlite3.c:10791:19: style: struct member 'sqlite3_rtree_query_info::apSqlParam' is never used. [unusedStructMember]
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */
                  ^
sqlite3/sqlite3.c:12799:11: style: struct member 'Fts5ExtensionApi::xUserData' is never used. [unusedStructMember]
  void *(*xUserData)(Fts5Context*);
          ^
sqlite3/sqlite3.c:12801:9: style: struct member 'Fts5ExtensionApi::xColumnCount' is never used. [unusedStructMember]
  int (*xColumnCount)(Fts5Context*);
        ^
sqlite3/sqlite3.c:12802:9: style: struct member 'Fts5ExtensionApi::xRowCount' is never used. [unusedStructMember]
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);
        ^
sqlite3/sqlite3.c:12803:9: style: struct member 'Fts5ExtensionApi::xColumnTotalSize' is never used. [unusedStructMember]
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);
        ^
sqlite3/sqlite3.c:12805:9: style: struct member 'Fts5ExtensionApi::xTokenize' is never used. [unusedStructMember]
  int (*xTokenize)(Fts5Context*,
        ^
sqlite3/sqlite3.c:12811:9: style: struct member 'Fts5ExtensionApi::xPhraseCount' is never used. [unusedStructMember]
  int (*xPhraseCount)(Fts5Context*);
        ^
sqlite3/sqlite3.c:12812:9: style: struct member 'Fts5ExtensionApi::xPhraseSize' is never used. [unusedStructMember]
  int (*xPhraseSize)(Fts5Context*, int iPhrase);
        ^
sqlite3/sqlite3.c:12814:9: style: struct member 'Fts5ExtensionApi::xInstCount' is never used. [unusedStructMember]
  int (*xInstCount)(Fts5Context*, int *pnInst);
        ^
sqlite3/sqlite3.c:12815:9: style: struct member 'Fts5ExtensionApi::xInst' is never used. [unusedStructMember]
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);
        ^
sqlite3/sqlite3.c:12818:9: style: struct member 'Fts5ExtensionApi::xColumnText' is never used. [unusedStructMember]
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);
        ^
sqlite3/sqlite3.c:12819:9: style: struct member 'Fts5ExtensionApi::xColumnSize' is never used. [unusedStructMember]
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);
        ^
sqlite3/sqlite3.c:12821:9: style: struct member 'Fts5ExtensionApi::xQueryPhrase' is never used. [unusedStructMember]
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,
        ^
sqlite3/sqlite3.c:12824:9: style: struct member 'Fts5ExtensionApi::xSetAuxdata' is never used. [unusedStructMember]
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));
        ^
sqlite3/sqlite3.c:12825:11: style: struct member 'Fts5ExtensionApi::xGetAuxdata' is never used. [unusedStructMember]
  void *(*xGetAuxdata)(Fts5Context*, int bClear);
          ^
sqlite3/sqlite3.c:12827:9: style: struct member 'Fts5ExtensionApi::xPhraseFirst' is never used. [unusedStructMember]
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);
        ^
sqlite3/sqlite3.c:12828:10: style: struct member 'Fts5ExtensionApi::xPhraseNext' is never used. [unusedStructMember]
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);
         ^
sqlite3/sqlite3.c:12830:9: style: struct member 'Fts5ExtensionApi::xPhraseFirstColumn' is never used. [unusedStructMember]
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);
        ^
sqlite3/sqlite3.c:12831:10: style: struct member 'Fts5ExtensionApi::xPhraseNextColumn' is never used. [unusedStructMember]
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);
         ^
sqlite3/sqlite3.c:13035:9: style: struct member 'fts5_tokenizer::xTokenize' is never used. [unusedStructMember]
  int (*xTokenize)(Fts5Tokenizer*,
        ^
sqlite3/sqlite3.c:13072:9: style: struct member 'fts5_api::xCreateTokenizer' is never used. [unusedStructMember]
  int (*xCreateTokenizer)(
        ^
sqlite3/sqlite3.c:13081:9: style: struct member 'fts5_api::xFindTokenizer' is never used. [unusedStructMember]
  int (*xFindTokenizer)(
        ^
sqlite3/sqlite3.c:13089:9: style: struct member 'fts5_api::xCreateFunction' is never used. [unusedStructMember]
  int (*xCreateFunction)(
        ^
sqlite3/sqlite3.c:16869:12: style: union member 'Anonymous1::notUsed1' is never used. [unusedStructMember]
    double notUsed1;            /* Spacer */
           ^
sqlite3/sqlite3.c:17893:12: style: struct member 'IndexSample::anLt' is never used. [unusedStructMember]
  tRowcnt *anLt;    /* Est. number of rows where key is less than this sample */
           ^
sqlite3/sqlite3.c:19154:7: style: struct member 'Sqlite3Config::mxStrlen' is never used. [unusedStructMember]
  int mxStrlen;                     /* Maximum string length */
      ^
sqlite3/sqlite3.c:19162:9: style: struct member 'Sqlite3Config::pHeap' is never used. [unusedStructMember]
  void *pHeap;                      /* Heap storage space */
        ^
sqlite3/sqlite3.c:19163:7: style: struct member 'Sqlite3Config::nHeap' is never used. [unusedStructMember]
  int nHeap;                        /* Size of pHeap[] */
      ^
sqlite3/sqlite3.c:19164:7: style: struct member 'Sqlite3Config::mnReq' is never used. [unusedStructMember]
  int mnReq, mxReq;                 /* Min and max heap requests sizes */
      ^
sqlite3/sqlite3.c:19164:14: style: struct member 'Sqlite3Config::mxReq' is never used. [unusedStructMember]
  int mnReq, mxReq;                 /* Min and max heap requests sizes */
             ^
sqlite3/sqlite3.c:19170:7: style: struct member 'Sqlite3Config::mxParserStack' is never used. [unusedStructMember]
  int mxParserStack;                /* maximum depth of the parser stack */
      ^
sqlite3/sqlite3.c:19204:7: style: struct member 'Sqlite3Config::szSorterRef' is never used. [unusedStructMember]
  u32 szSorterRef;                  /* Min size in bytes to use sorter-refs */
      ^
sqlite3/sqlite3.c:19245:22: style: union member 'Anonymous19::pCCurHint' is never used. [unusedStructMember]
    struct CCurHint *pCCurHint;               /* Used by codeCursorHint() */
                     ^
sqlite3/sqlite3.c:22374:7: style: struct member 'ScanStatus::addrLoop' is never used. [unusedStructMember]
  int addrLoop;                   /* Address of "loops" counter */
      ^
sqlite3/sqlite3.c:22375:7: style: struct member 'ScanStatus::addrVisit' is never used. [unusedStructMember]
  int addrVisit;                  /* Address of "rows visited" counter */
      ^
sqlite3/sqlite3.c:22376:7: style: struct member 'ScanStatus::iSelectID' is never used. [unusedStructMember]
  int iSelectID;                  /* The "Select-ID" for this loop */
      ^
sqlite3/sqlite3.c:22390:16: style: struct member 'DblquoteStr::pNextStr' is never used. [unusedStructMember]
  DblquoteStr *pNextStr;   /* Next string literal in the list */
               ^
sqlite3/sqlite3.c:22491:7: style: struct member 'PreUpdate::aRecord' is never used. [unusedStructMember]
  u8 *aRecord;                    /* old.* database record */
      ^
sqlite3/sqlite3.c:22494:19: style: struct member 'PreUpdate::pNewUnpacked' is never used. [unusedStructMember]
  UnpackedRecord *pNewUnpacked;   /* Unpacked version of new.* record */
                  ^
sqlite3/sqlite3.c:22495:7: style: struct member 'PreUpdate::iNewReg' is never used. [unusedStructMember]
  int iNewReg;                    /* Register for new.* values */
      ^
sqlite3/sqlite3.c:22496:7: style: struct member 'PreUpdate::iBlobWrite' is never used. [unusedStructMember]
  int iBlobWrite;                 /* Value returned by preupdate_blobwrite() */
      ^
sqlite3/sqlite3.c:22497:7: style: struct member 'PreUpdate::iKey1' is never used. [unusedStructMember]
  i64 iKey1;                      /* First key value passed to hook */
      ^
sqlite3/sqlite3.c:22498:7: style: struct member 'PreUpdate::iKey2' is never used. [unusedStructMember]
  i64 iKey2;                      /* Second key value passed to hook */
      ^
sqlite3/sqlite3.c:22499:8: style: struct member 'PreUpdate::aNew' is never used. [unusedStructMember]
  Mem *aNew;                      /* Array of new.* values */
       ^
sqlite3/sqlite3.c:22501:10: style: struct member 'PreUpdate::pPk' is never used. [unusedStructMember]
  Index *pPk;                     /* PK index if pTab is WITHOUT ROWID */
         ^
sqlite3/sqlite3.c:35681:9: style: struct member 'vxworksFileId::zCanonicalName' is never used. [unusedStructMember]
  char *zCanonicalName;         /* Canonical filename */
        ^
sqlite3/sqlite3.c:38675:18: style: Variable 'nWrite' is assigned a value that is never used. [unreadVariable]
      int nWrite = 0;             /* Number of bytes written by seekAndWrite */
                 ^
sqlite3/sqlite3.c:58677:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;
         ^
sqlite3/sqlite3.c:66965:13: style: Variable 'pIdxKey' is assigned a value that is never used. [unreadVariable]
    pIdxKey = 0;
            ^
sqlite3/sqlite3.c:71521:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;
         ^
sqlite3/sqlite3.c:77370:15: style: Variable 'pgszSrc' is assigned a value that is never used. [unreadVariable]
  int pgszSrc = 0;    /* Source page size */
              ^
sqlite3/sqlite3.c:77371:16: style: Variable 'pgszDest' is assigned a value that is never used. [unreadVariable]
  int pgszDest = 0;   /* Destination page size */
               ^
sqlite3/sqlite3.c:82617:12: style: Variable 'zSuper' is assigned a value that is never used. [unreadVariable]
    zSuper = 0;
           ^
sqlite3/sqlite3.c:98597:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;             /* Return code */
         ^
sqlite3/sqlite3.c:100461:10: style: Variable 'pDup' is assigned a value that is never used. [unreadVariable]
    pDup = 0;
         ^
sqlite3/sqlite3.c:134855:9: style: Variable 'pOp' is assigned a value that is never used. [unreadVariable]
    pOp = 0; /* Ensure pOp not used after sqltie3VdbeAddOp3() */
        ^
sqlite3/sqlite3.c:136477:11: style: Variable 'v' is assigned a value that is never used. [unreadVariable]
  Vdbe *v = 0;
          ^
sqlite3/sqlite3.c:136478:14: style: Variable 'iLimit' is assigned a value that is never used. [unreadVariable]
  int iLimit = 0;
             ^
sqlite3/sqlite3.c:143037:15: style: Variable 'pWhen' is assigned a value that is never used. [unreadVariable]
  Expr *pWhen = 0;            /* Duplicate of trigger WHEN expression */
              ^
sqlite3/sqlite3.c:156000:19: style: Variable 'mPrereq' is assigned a value that is never used. [unreadVariable]
  Bitmask mPrereq = 0;
                  ^
sqlite3/sqlite3.c:167669:9: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
  int n = 0;                      /* Length of the next token token */
        ^
sqlite3/sqlite3.c:195524:21: style: Variable 'zRoot' is assigned a value that is never used. [unreadVariable]
  const char *zRoot = 0;
                    ^
sqlite3/sqlite3.c:38164:0: information: Skipping configuration 'EDEVERR' since the value of 'EDEVERR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      case EDEVERR:
^
sqlite3/sqlite3.c:35457:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if( errno==EINTR ) continue;
^
sqlite3/sqlite3.c:35621:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  do{ rc = osFtruncate(h,sz); }while( rc<0 && errno==EINTR );
^
sqlite3/sqlite3.c:35645:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case EINTR:
^
sqlite3/sqlite3.c:38086:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if( errno==EINTR ){ got = 1; continue; }
^
sqlite3/sqlite3.c:38212:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  }while( rc<0 && errno==EINTR );
^
sqlite3/sqlite3.c:41461:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      do{ got = osRead(fd, zBuf, nBuf); }while( got<0 && errno==EINTR );
^
sqlite3/sqlite3.c:38161:0: information: Skipping configuration 'ENXIO' since the value of 'ENXIO' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      case ENXIO:
^
sqlite3/sqlite3.c:36153:0: information: Skipping configuration 'EOVERFLOW;SQLITE_DISABLE_LFS' since the value of 'EOVERFLOW' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if( pFile->lastErrno==EOVERFLOW ) return SQLITE_NOLFS;
^
sqlite3/sqlite3.c:35452:0: information: Skipping configuration 'FD_CLOEXEC;O_CLOEXEC' since the value of 'O_CLOEXEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    fd = osOpen(z,f|O_CLOEXEC,m2);
^
sqlite3/sqlite3.c:38413:0: information: Skipping configuration 'F_FULLFSYNC' since the value of 'F_FULLFSYNC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    rc = osFcntl(fd, F_FULLFSYNC, 0);
^
sqlite3/sqlite3.c:120107:12: error: Null pointer dereference: (VTable*)0 [nullPointer]
    return sqlite3GetVTable(pParse->db, pTab)->pMod->pModule->xUpdate==0;
           ^
sqlite3/sqlite3.c:10785:17: style: struct member 'sqlite3_rtree_query_info::iRowid' is never used. [unusedStructMember]
  sqlite3_int64 iRowid;             /* Rowid for current entry */
                ^
sqlite3/sqlite3.c:12817:19: style: struct member 'Fts5ExtensionApi::xRowid' is never used. [unusedStructMember]
  sqlite3_int64 (*xRowid)(Fts5Context*);
                  ^
sqlite3/sqlite3.c:15390:13: style: union member 'p4union::pVtab' is never used. [unusedStructMember]
    VTable *pVtab;         /* Used when p4type is P4_VTAB */
            ^
sqlite3/sqlite3.c:17531:11: style: struct member 'Anonymous4::addColOffset' is never used. [unusedStructMember]
      int addColOffset;    /* Offset in CREATE TABLE stmt to add a new column */
          ^
sqlite3/sqlite3.c:17541:14: style: struct member 'Anonymous6::azArg' is never used. [unusedStructMember]
      char **azArg;        /* 0: module 1: schema 2: vtab name 3...: args */
             ^
sqlite3/sqlite3.c:19254:23: style: union member 'Anonymous19::pRename' is never used. [unusedStructMember]
    struct RenameCtx *pRename;                /* RENAME COLUMN context */
                      ^
sqlite3/sqlite3.c:22133:26: style: union member 'Anonymous21::pVCur' is never used. [unusedStructMember]
    sqlite3_vtab_cursor *pVCur; /* CURTYPE_VTAB.              Vtab cursor */
                         ^
sqlite3/sqlite3.c:146916:11: style: struct member 'Anonymous34::idxNum' is never used. [unusedStructMember]
      int idxNum;            /* Index number */
          ^
sqlite3/sqlite3.c:146918:11: style: struct member 'Anonymous34::bOmitOffset' is never used. [unusedStructMember]
      u32 bOmitOffset : 1;   /* True to let virtual table handle offset */
          ^
sqlite3/sqlite3.c:146920:11: style: struct member 'Anonymous34::omitMask' is never used. [unusedStructMember]
      u16 omitMask;          /* Terms that may be omitted */
          ^
sqlite3/sqlite3.c:146922:11: style: struct member 'Anonymous34::mHandleIn' is never used. [unusedStructMember]
      u32 mHandleIn;         /* Terms to handle as IN(...) instead of == */
          ^
sqlite3/sqlite3.c:151976:7: style: struct member 'HiddenIndexInfo::mIn' is never used. [unusedStructMember]
  u32 mIn;                 /* Mask of terms that are <col> IN (...) */
      ^
sqlite3/sqlite3.c:151977:7: style: struct member 'HiddenIndexInfo::mHandleIn' is never used. [unusedStructMember]
  u32 mHandleIn;           /* Terms that vtab will handle as <col> IN (...) */
      ^
sqlite3/sqlite3.c:93032:17: style: Unused variable: pVtab [unusedVariable]
  sqlite3_vtab *pVtab;
                ^
sqlite3/sqlite3.c:93033:25: style: Unused variable: pModule [unusedVariable]
  const sqlite3_module *pModule;
                        ^
sqlite3/sqlite3.c:100257:18: style: Variable 'pParse' is assigned a value that is never used. [unreadVariable]
     || ((pParse = pWalker->pParse)!=0 && IN_RENAME_OBJECT)
                 ^
sqlite3/sqlite3.c:151168:22: style: Variable 'eOp2' is assigned a value that is never used. [unreadVariable]
  unsigned char eOp2 = 0;          /* op2 value for LIKE/REGEXP/GLOB */
                     ^
sqlite3/sqlite3.c:38433:0: information: Skipping configuration 'HAVE_FDATASYNC=0;fdatasync' since the value of 'fdatasync' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = fdatasync(fd);
^
sqlite3/shell.c:1749:16: warning: Null pointer dereference: p [ctunullpointer]
  sqlite3_free(p->aiIndent);
               ^
sqlite3/shell.c:1960:11: note: Assuming that condition 'pArg' is not redundant

          ^
sqlite3/shell.c:1957:26: note: Calling function explain_data_delete, 1st argument is null
      explain_data_delete(pArg);
                         ^
sqlite3/shell.c:1749:16: note: Dereferencing argument p that is null
  sqlite3_free(p->aiIndent);
               ^
sqlite3/shell.c:4856:10: warning: Null pointer dereference: zLine [ctunullpointer]
  while( IsSpace(zLine[0]) ){ zLine++; };
         ^
sqlite3/shell.c:4920:9: note: Assuming that condition 'zLine' is not redundant

        ^
sqlite3/shell.c:4930:35: note: Calling function line_is_command_terminator, 1st argument is null
    if( line_is_command_terminator(zLine) && line_is_complete(zSql, nSql) ){
                                  ^
sqlite3/shell.c:4856:10: note: Dereferencing argument zLine that is null
  while( IsSpace(zLine[0]) ){ zLine++; };
         ^
sqlite3/sqlite3.c:24638:8: error: Null pointer dereference: pVfs [ctunullpointer]
  rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);
       ^
sqlite3/sqlite3.c:100064:21: note: Calling function sqlite3JournalOpen, 1st argument is null
  sqlite3JournalOpen(0, 0, pJfd, 0, -1);
                    ^
sqlite3/sqlite3.c:100042:12: note: Calling function sqlite3OsOpen, 1st argument is null
    return sqlite3OsOpen(pVfs, zName, pJfd, flags, 0);
           ^
sqlite3/sqlite3.c:24638:8: note: Dereferencing argument pVfs that is null
  rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);
       ^
sqlite3/sqlite3.c:50235:10: warning: Null pointer dereference: p [ctunullpointer]
  return p->iSize;
         ^
sqlite3/sqlite3.c:66738:9: note: Assuming that condition '!pBt->pHasContent' is not redundant

        ^
sqlite3/sqlite3.c:66742:47: note: Calling function sqlite3BitvecSize, 1st argument is null
  if( rc==SQLITE_OK && pgno<=sqlite3BitvecSize(pBt->pHasContent) ){
                                              ^
sqlite3/sqlite3.c:50235:10: note: Dereferencing argument p that is null
  return p->iSize;
         ^
sqlite3/sqlite3.c:84638:7: warning: Null pointer dereference: p [ctunullpointer]
  if( p->pKeyInfo->nAllField<=13 ){
      ^
sqlite3/sqlite3.c:71835:30: note: Assuming that condition 'pIdxKey' is not redundant

                             ^
sqlite3/sqlite3.c:71814:42: note: Calling function sqlite3VdbeFindCompare, 1st argument is null
  xRecordCompare = sqlite3VdbeFindCompare(pIdxKey);
                                         ^
sqlite3/sqlite3.c:84638:7: note: Dereferencing argument p that is null
  if( p->pKeyInfo->nAllField<=13 ){
      ^
sqlite3/sqlite3.c:133943:4: warning: Null pointer dereference: ppStmt [ctunullpointer]
  *ppStmt = 0;
   ^
sqlite3/sqlite3.c:134023:34: note: Assuming that condition 'ppStmt==0' is not redundant

                                 ^
sqlite3/sqlite3.c:134022:29: note: Calling function sqlite3LockAndPrepare, 6th argument is null
  rc = sqlite3LockAndPrepare(db,zSql,nBytes,0,0,ppStmt,pzTail);
                            ^
sqlite3/sqlite3.c:133943:4: note: Dereferencing argument ppStmt that is null
  *ppStmt = 0;
   ^
sqlite3/sqlite3.c:134091:4: warning: Null pointer dereference: ppStmt [ctunullpointer]
  *ppStmt = 0;
   ^
sqlite3/sqlite3.c:134139:34: note: Assuming that condition 'ppStmt==0' is not redundant

                                 ^
sqlite3/sqlite3.c:134138:24: note: Calling function sqlite3Prepare16, 5th argument is null
  rc = sqlite3Prepare16(db,zSql,nBytes,0,ppStmt,pzTail);
                       ^
sqlite3/sqlite3.c:134091:4: note: Dereferencing argument ppStmt that is null
  *ppStmt = 0;
   ^
autosetup/jimsh0.c:10791:0: style: The function 'Jim_DeleteAssocData' is never used. [unusedFunction]

^
jim-eventloop.c:202:0: style: The function 'Jim_FindFileHandler' is never used. [unusedFunction]

^
jim-load.c:117:0: style: The function 'Jim_FreeLoadHandles' is never used. [unusedFunction]

^
jim-tty.c:147:0: style: The function 'Jim_GetTtySettings' is never used. [unusedFunction]

^
autosetup/jimsh0.c:6636:0: style: The function 'Jim_IntHashFunction' is never used. [unusedFunction]

^
autosetup/jimsh0.c:6690:0: style: The function 'Jim_ResizeHashTable' is never used. [unusedFunction]

^
jim-tty.c:202:0: style: The function 'Jim_SetTtySettings' is never used. [unusedFunction]

^
autosetup/jimsh0.c:7013:0: style: The function 'Jim_StackLen' is never used. [unusedFunction]

^
autosetup/jimsh0.c:7038:0: style: The function 'Jim_StackPeek' is never used. [unusedFunction]

^
autosetup/jimsh0.c:8326:0: style: The function 'Jim_StringCompareLenObj' is never used. [unusedFunction]

^
jim-eventloop.c:784:0: style: The function 'Jim_eventloopInit' is never used. [unusedFunction]

^
examples.ext/helloworld.c:20:0: style: The function 'Jim_helloworldInit' is never used. [unusedFunction]

^
jim-history.c:149:0: style: The function 'Jim_historyInit' is never used. [unusedFunction]

^
jim-interp.c:171:0: style: The function 'Jim_interpInit' is never used. [unusedFunction]

^
jim-json.c:419:0: style: The function 'Jim_jsonInit' is never used. [unusedFunction]

^
jim-load.c:132:0: style: The function 'Jim_loadInit' is never used. [unusedFunction]

^
tests/loadtest.c:26:0: style: The function 'Jim_loadtestInit' is never used. [unusedFunction]

^
jim-mk.cpp:2257:0: style: The function 'Jim_mkInit' is never used. [unusedFunction]

^
jim-namespace.c:334:0: style: The function 'Jim_namespaceInit' is never used. [unusedFunction]

^
jim-pack.c:476:0: style: The function 'Jim_packInit' is never used. [unusedFunction]

^
jim-package.c:256:0: style: The function 'Jim_packageInit' is never used. [unusedFunction]

^
jim-posix.c:140:0: style: The function 'Jim_posixInit' is never used. [unusedFunction]

^
jim-readline.c:66:0: style: The function 'Jim_readlineInit' is never used. [unusedFunction]

^
jim-redis.c:236:0: style: The function 'Jim_redisInit' is never used. [unusedFunction]

^
jim-sdl.c:536:0: style: The function 'Jim_sdlInit' is never used. [unusedFunction]

^
jim-signal.c:536:0: style: The function 'Jim_signalInit' is never used. [unusedFunction]

^
jim-sqlite3.c:287:0: style: The function 'Jim_sqlite3Init' is never used. [unusedFunction]

^
sqlite3/jim-sqlite.c:2824:0: style: The function 'Jim_sqliteInit' is never used. [unusedFunction]

^
jim-syslog.c:171:0: style: The function 'Jim_syslogInit' is never used. [unusedFunction]

^
jim-tclprefix.c:215:0: style: The function 'Jim_tclprefixInit' is never used. [unusedFunction]

^
jim-win32.c:507:0: style: The function 'Jim_win32Init' is never used. [unusedFunction]

^
jim-zlib.c:310:0: style: The function 'Jim_zlibInit' is never used. [unusedFunction]

^
jim-aio.c:765:0: style: The function 'aio_autoflush' is never used. [unusedFunction]

^
jim-aio.c:1626:0: style: The function 'aio_cmd_timeout' is never used. [unusedFunction]

^
linenoise.c:2134:0: style: The function 'linenoiseColumns' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:49849:0: style: The function 'sqlite3_deserialize' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:172005:0: style: The function 'sqlite3_global_recover' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:28650:0: style: The function 'sqlite3_memory_alarm' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:49768:0: style: The function 'sqlite3_serialize' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:168716:0: style: The function 'sqlite3_shutdown' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:84466:0: style: The function 'vdbeRecordCompareInt' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:84560:0: style: The function 'vdbeRecordCompareString' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:97262:0: style: The function 'vdbeSorterCompare' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:97323:0: style: The function 'vdbeSorterCompareInt' is never used. [unusedFunction]

^
sqlite3/sqlite3.c:97281:0: style: The function 'vdbeSorterCompareText' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

